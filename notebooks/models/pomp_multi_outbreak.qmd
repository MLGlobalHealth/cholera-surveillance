---
title: "MCMC Calibration"
format: html
editor: visual
---

# Environment Setup

```{r setup}
# Packages
library(rprojroot)
library(tidyverse)
library(pomp)
library(foreach)
library(doParallel)
library(doRNG)
library(patchwork)
library(GGally)

# Set Random Seed
nb_name <-  "Cholera modelling with compartmental models and pomp"
seed <- sum(sapply(str_split(nb_name, pattern = "", simplify = TRUE), FUN = utf8ToInt))

# Parallel Computing
n_cores <- parallel::detectCores()
registerDoParallel(n_cores)
registerDoRNG(seed)

# Folder Structure
root <- has_file("Oxford-Cholera.Rproj")$make_fix_file()
raw_data_dir <- root("data/raw")
proc_data_dir <- root("data/processed")
output_dir <- root("models_output/pomp")
dir.create(output_dir, showWarnings = FALSE)
img_dir <- root("images")
```

# Functions

```{r}
symlog <- function(x) {
  symlogx <- list()
  for (i in 1:length(x)) {
    if (is.na(x[i])) {
      symlogx[i] <- NA
    }
    else if (abs(x[i]) < 1e-5) {
      symlogx[i] <- x[i]
    }
    else if (x[i] > 0) {
      symlogx[i] <- log(x[i])
    }
    else {
      symlogx[i] <- -log(-x[i])
    }
  }
  return(symlogx)
}
```

# Import Data

We are filling in idps but it's more appropriate to focus on time range when we have data. We are also readjusting the number of idps because the figures are too high for the expected population, we need to better estimate the starting population.

```{r}
# Population
# uvira_pop <- (
#   st_read(file.path(proc_data_dir, "uvira_quarters_pop_2016.geojson"))
#   %>% select(population)
#   %>% sum()
# )
uvira_pop_2016 <- (
  readxl::read_excel(
    file.path(raw_data_dir, "annual_population_2016_2022.xlsx"),
    sheet = "pop_2022"
  )
  %>% select("2016")
  %>% sum()
)

# df_reports_cov_shap_train
df_reports <- (
  read_csv(
    file.path(proc_data_dir, "uvira_chol_cov_week_20250402.csv", fsep = "/"),
    show_col_types = FALSE
  )
  %>% mutate(
    # date=(julian(date,origin=as.Date("1950-01-01")))/365.25+1950,
    date = seq(-1, n()-2, by = 1) / 52,
    cov = cov - min(cov),
    idps = replace_na(idps, 0) / 7,
    # idps = idps / (10*max(abs(idps))),
    # idps = zoo::rollapply(replace_na(idps, 0), 4, mean, fill = 0)
    dis = num_disaster_affected / max(num_disaster_affected),
    # cov_1 = scale(rainfall_mm__maximum),
    # cov_2 = scale(esi__median),
    # cov_3 = scale(.$'esi__change_quantiles__f_agg_\"mean\"__isabs_False__qh_0.4__ql_0.0'),
    # cov_4 = scale(esi__max_langevin_fixed_point__m_3__r_30),
    # cov_5 = scale(.$'num_fatalities__change_quantiles__f_agg_\"var\"__isabs_False__qh_1.0__ql_0.4'),
    # cov_6 = scale(lake_level__autocorrelation__lag_3),
    # cov_7 = scale(num_fatalities__benford_correlation)
  )
  %>% select(
    date,
    reports,
    rdt_confirmed,
    idps,
    dis,
    cov,
    cov_1 = rainfall_mm__maximum,
    cov_2 = esi__median,
    cov_3 = 'esi__change_quantiles__f_agg_\"mean\"__isabs_False__qh_0.4__ql_0.0',
    cov_4 = esi__max_langevin_fixed_point__m_3__r_30,
    cov_5 = 'num_fatalities__change_quantiles__f_agg_\"var\"__isabs_False__qh_1.0__ql_0.4',
    cov_6 = lake_level__autocorrelation__lag_3,
    cov_7 = num_fatalities__benford_correlation,
    vacc_1_prop,
    vacc_2_prop
  )
)
```

```{r}
# plot(df_reports$date, exp(df_reports$cov_7), type = "l", col = "black")
plot(df_reports$date, df_reports$cov_7, type = "l", col = "black")
```

```{r}
plot(df_reports$date, 15 + 250*df_reports$cov, type = "l", col = "black")
```

```{r}
# plot(df_reports$date, symlog(df_reports$idps), type = "l", col = "black")
plot(df_reports$date, df_reports$idps, type = "l", col = "black")
```

```{r}
plot(df_reports$date, df_reports$dis, type = "l", col = "black")
```

```{r}
p1 <- (
  ggplot(data = df_reports)
  + geom_histogram(
    aes(x = reports), 
    binwidth = 1,
    fill = "cornflowerblue"
  )
)
p2 <- (
  ggplot(data = df_reports)
  + geom_histogram(
    aes(x = rdt_confirmed), 
    binwidth = 1,
    fill = "salmon"
  )
)
p1/p2
```

Maybe the RDT confirmed are zero inflated?

# Computational Parameters

```{r}
run_level <- 1
Np <- switch(run_level, 200, 1e3, 5e3)
Nmif <- switch(run_level, 50, 200, 400)
Nreps_eval <- switch(run_level, 4, 10, 20)
Nreps_local <- switch(run_level, 10, 20, 40)
Nreps_global <- switch(run_level, 20, 40, 100)
Nsim <- switch(run_level, 50, 100, 500)
Napproxbayes_p <- switch(run_level, 10000, 20000, 40000)
Nbayes_iter <- switch(run_level, 5000, 10000, 40000)
profile_pts <- switch(run_level, 3, 5, 30)
profile_Nreps <- switch(run_level, 2, 3, 10)
```

# Parameters

From: https://databank.worldbank.org/reports.aspx?source=2&series=SP.DYN.CBRT.IN&country= Birth and death rates are per person and per DAY (all rates in the model are daily rates). Note that one unit of time is one year and each time step is 1/52 so all times and rates need to be scaled to this. For example, an infectious period of 10 days needs to be expressed as the number of units (1/52): (10/7) \* (1/52). For the same reason birth and death rates that are collected as rate per year they only need to be scaled by the number of people but left as year estimates. The time step 1/52 is then applied during the pomp step.

```{r}
# Birth and death rates
# From: https://databank.worldbank.org/reports.aspx?source=2&series=SP.DYN.CBRT.IN&country=

# dem_dates <- as.Date(paste0(seq(2016, 2025, by=1), "-06-01")) # We reconstruct a daily history from yearly values
df_dem <- tibble(
  date = df_reports$date[seq(1, length(df_reports$date), length.out=10)],
  deathrate = c(10.1, 9.9, 9.6, 9.4, 9.5, 9.7, 9.4, 9.4, 9.4, 9.4) / (1000),
  # birthrate = c(44, 43.9, 43.5, 43.2, 42.8, 42.5, 42.2, 41.8, 41.5, 41.2) / (1000)
  birthrate = c(43.5, 43.4, 43, 42.7, 42.3, 42, 41.7, 41.3, 41, 40.7) * 1.05 / (1000)
)
```

# Full model data

```{r}
df_full <- (
  df_reports
  %>% merge(
    df_dem,
    by="date",
    all.x=TRUE
  )
  %>% mutate(
    birthrate = zoo::na.approx(birthrate, na.rm=FALSE),  # We interpolated the rates
    deathrate = zoo::na.approx(deathrate, na.rm=FALSE)
  )
)

df_model <- (
  df_full
  %>% select(date, reports)
  %>% filter(date >= 0)
)

df_covar <- (
  df_full
  %>% select(
    date, 
    birthrate, 
    deathrate, 
    cov, 
    cov_1,
    cov_2,
    cov_3,
    cov_4,
    cov_5,
    cov_6,
    cov_7,
    idps,
    dis
  )
)
```

# Basic Model

```{r}
model_output_filename_1 <- file.path(output_dir, "uvira_multioutbreak_basic.csv")
```

## Model Definition

### Fixed parameters

```{r}
# N_0 <- 280000  # Initial population size
N_0 <- uvira_pop_2016
mu_latend <- 1 / ((5/7) / 52) # inverse of latent period (5 days transformed in weeks)
mu_ar <- 1 / ((10/7) / 52) # inverse of asymptomatic period (10 days transformed in weeks)
mu_ir <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)

fixed_params_1 <- c(
  N_0 = N_0,
  mu_latend = mu_latend,
  mu_ar = mu_ar,
  mu_ir = mu_ir
)
```

### Initialization Function

```{r}
rinit_1 <- Csnippet("
  double m = N_0/(s_0+e_0+a_0+i_0+r_0);
  S = nearbyint(s_0*m);
  E = nearbyint(e_0*m);
  A = nearbyint(a_0*m);
  I = nearbyint(i_0*m);
  R = nearbyint(r_0*m);
  N = S + E + A + I + R;
  C = 0;
  W = 0;
")
```

### Step Function

```{r}
rproc_1 <- Csnippet("
  double foi, dw, births;
  double rate[11];
  double trans[11];

  // Poisson births
  births = rpois(birthrate * N * dt);

  // expected force of infection
  foi = Beta*(I + eps_A * A)/N;
  
  // white noise (extrademographic stochasticity)
  dw = rgammawn(sigmaSE,dt);

  rate[0] = foi*dw/dt;  // stochastic force of infection
  rate[1] = deathrate;        // natural death rate
  rate[2] = mu_latend * f_ai;      // transition to asymp
  rate[3] = mu_latend * (1 - f_ai); // transition to symp
  rate[4] = deathrate;        // natural death rate
  rate[5] = mu_ar;       // asymp -> recovery
  rate[6] = deathrate;        // natural death rate
  rate[7] = mu_ir;       // symp -> recovered
  rate[8] = deathrate;        // natural death rate
  rate[9] = mu_rs;       // recovered -> susceptible
  rate[10] = deathrate;        // natural death rate

  // transitions between classes
  reulermultinom(2, S, &rate[0], dt, &trans[0]);
  reulermultinom(3, E, &rate[2], dt, &trans[2]);
  reulermultinom(2, A, &rate[5], dt, &trans[5]);
  reulermultinom(2, I, &rate[7], dt, &trans[7]);
  reulermultinom(2, R, &rate[9], dt, &trans[9]);

  S += births - trans[0] - trans[1] + trans[9];
  E += trans[0] - trans[2] - trans[3] - trans[4];
  A += trans[2] - trans[5] - trans[6];
  I += trans[3] - trans[7] - trans[8];
  R += trans[5] + trans[7] - trans[9] - trans[10];
  
  // Measured
  C += trans[3];
  
  // Noise
  W += (dw - dt)/sigmaSE;  

  N = S + E + A + I + R;
")
```

### Observation Function

```{r}
# dmeas_1 <- Csnippet("
#   double tol = 1.0e-25;
#   double mean_reports = rho*C;
#   double sd_reports = sqrt(pow(tau*(C+reports)/2,2) + mean_reports);
#   if (reports > 0.0) {
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0)
#       - pnorm(reports-0.5,mean_reports,sd_reports,1,0) + tol;
#   }
#   else{
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0) + tol;
#   }
#   if (give_log) lik = log(lik);
# ")

dmeas_1 <- Csnippet("
  double f;
  if (tau > 0.0) {
    f = dnbinom_mu(nearbyint(reports), 1.0/tau, rho*C, give_log);
  }
  else {
    f = dpois(nearbyint(reports), rho*C, give_log);
  }
  lik = (give_log) ? f : exp(f);
")

# dmeas_1 <- Csnippet("
#   double f;
#   f = dbinom(nearbyint(reports), C, rho, give_log);
#   lik = (give_log) ? f : exp(f);
# ")

################################

# rmeas_1 <- Csnippet("
#   double mean_reports = rho*C;
#   double sd_reports = sqrt(pow(tau*C,2) + mean_reports);
#   reports = rnorm(mean_reports, sd_reports);
#   if (reports > 0.0) {
#     reports = nearbyint(reports);
#   } else {
#     reports = 0.0;
#   }
# ")
rmeas_1 <- Csnippet("
  if (tau > 0.0) {
    reports = rnbinom_mu(1.0/tau, rho*C);
  }
  else {
    reports = rpois(rho*C);
  }
")
# rmeas_1 <- Csnippet("
#   reports = rbinom(C, rho);
# ")

```

## Initial parameter estimates

```{r}
# initial guesses
s_0_guess <- 0.5
i_0_guess <- 0.001
a_0_guess <- 0.002
e_0_guess <- 0.003
r_0_guess <- max(1 - s_0_guess - e_0_guess - a_0_guess - i_0_guess, 0)
Beta_guess <- 300
eps_A_guess <- 0.3
f_ai_guess <- 0.7
mu_rs_guess <- 1 / ((250/7) / 52) # inverse of immunity period (50 days transformed in weeks)
rho_guess <- 0.03
tau_guess <- 0.01
sigmaSE_guess <- 0.1

init_params_1 <- c(
  fixed_params_1,
  s_0 = s_0_guess,
  e_0 = e_0_guess,
  a_0 = a_0_guess,
  i_0 = i_0_guess,
  r_0 = r_0_guess,
  Beta = Beta_guess,
  eps_A = eps_A_guess,
  f_ai = f_ai_guess,
  mu_rs = mu_rs_guess,
  tau = tau_guess,
  rho = rho_guess,
  sigmaSE = sigmaSE_guess
)
```

## POMP object

```{r}
statenames_1 <- c(
  "S", 
  "E", 
  "A", 
  "I",
  "R", 
  "C",
  "W",
  "N"
)
obsnames_1 <- "reports"
covar_1 <- covariate_table(
  df_covar %>% select(c(date, birthrate, deathrate)),
  times="date"
)
covarnames_1 <- c(
  "birthrate", 
  "deathrate"
)
rp_names_log_1 <- c(
  "sigmaSE",
  "tau",
  "Beta",
  "mu_rs"
)
rp_names_logit_1 <- c(
  "f_ai",
  "eps_A",
  "rho"
)
ivp_names_1 <- c(
  "s_0",
  "e_0",
  "a_0",
  "i_0",
  "r_0"
)
paramnames_1 <- c(
  rp_names_log_1, 
  rp_names_logit_1, 
  ivp_names_1, 
  names(fixed_params_1)
)
accumvars_1 <- c(
  "C",
  "W"
)
partrans_1 <- parameter_trans(
  log=rp_names_log_1,
  # logit=c(rp_names_logit_1, ivp_names_1)
  logit=rp_names_logit_1,
  barycentric=ivp_names_1
)

m_1 <- (
  df_model
  %>% select(date, reports)
  %>% pomp(
    times = "date",
    t0 = df_covar$date[1],
    rprocess = euler(
      step.fun = rproc_1,
      delta.t = 1/52/7
    ),
    rinit = rinit_1,
    rmeasure = rmeas_1,
    dmeasure = dmeas_1,
    obsnames = obsnames_1,
    covar = covar_1,
    covarnames = covarnames_1,
    accumvars = accumvars_1,
    statenames = statenames_1,
    paramnames = paramnames_1,
    partrans = partrans_1,
    params = init_params_1 
  )
)
```

## Simulations

```{r}
sims_1 <- (
  m_1
  %>% simulate(
    nsim = 20,
    format = "data.frame",
    include.data = TRUE
  )
)
```

```{r}
pf_sim_1 <- pfilter(m_1, Np = 1000)
lk_sim_1 <- logLik(pf_sim_1)
lk_sim_1
```

```{r}
(
  sims_1
  %>% filter(.id == 1)
  %>% select(date, S, E, A, I, C, R, N)
  %>% pivot_longer(
    cols = -date,
    names_to = "compartment",
    values_to = "counts"
  )
  %>% ggplot(
    aes(x = date, y = counts, color = compartment)
  )
  + facet_wrap(~compartment, scales = "free_y")
  + geom_line()
  + guides(color = "none")
)
```

```{r}
#| fig-width: 4.5
#| fig-height: 3
(
  sims_1
  %>% mutate(
    date = as.Date("2016-01-01") + 7 * date
  )
  %>% ggplot(
    aes(x = date, y = reports, group=.id, color=.id=="data")
  )
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line()
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases",
    x = "Date",
    y = "Counts"
  )
)
# ggsave(filename = "test_pomp_simulation.png", path = img_dir)
```

## Local Search

```{r}
# Parameters 
rw.sd_rp <- 0.02
rw.sd_ivp <- 0.2
cooling.fraction.50 <- 0.5 # Level of parameter variance after 50% of iterations
rw.sd_1 <- rw_sd(
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  r_0 = ivp(rw.sd_ivp),
  Beta = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_ai = rw.sd_rp,
  mu_rs = rw.sd_rp,
  tau = rw.sd_rp,
  rho = rw.sd_rp,
  sigmaSE = rw.sd_rp
)
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_local_1 <- foreach (
  i=1:Nreps_local, 
  .combine=c 
) %dopar% {
  init_params_1[rp_names_log_1] <- rlnorm(
    n=length(rp_names_log_1), 
    meanlog=log(init_params_1[rp_names_log_1]),
    sdlog=1
  )
  init_params_1[c(rp_names_logit_1, ivp_names_1)] <- runif(
    n=length(c(rp_names_logit_1, ivp_names_1)),
    min=0,
    max=1
  )
  (
    mif2(
      m_1,
      Np=Np,
      Nmif=Nmif,
      params=init_params_1,
      cooling.fraction.50 = cooling.fraction.50,
      rw.sd=rw.sd_1
    )
  )
}
end <- Sys.time()
sprintf("Run time of local iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_local_all_1 <- foreach(
  mf = m_local_1,
  .combine=rbind
) %dopar% {
  pf <- replicate(
    n = Nreps_eval,
    logLik(pfilter(mf, Np = Np))
  )
  logmeanexp(pf, se = TRUE)
}
```

Focus on the highest estimated likelihood to get MLE

```{r}
m_local_mle_1 <- m_local_1[[which.max(loglik_local_all_1[,1])]]
params_local_1 <- coef(m_local_mle_1)
loglik_local_best_1 <- logmeanexp(
  replicate(
    n = Nreps_eval,
    logLik(pfilter(m_local_mle_1, Np = 1000))
  ),
  se = TRUE
)
```

```{r}
loglik_local_best_1
```

### Collect Results

```{r}
df_results_local_1 <- data.frame(
  t(sapply(m_local_1, coef)),
  log_lik=loglik_local_all_1[,1],
  log_lik_se=loglik_local_all_1[,2]
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_1)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_local_1, 
      file = model_output_filename_1, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostics

```{r}
model_params_1 <- read.table(
  model_output_filename_1,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_1$log_lik, digits = 5)
```

#### Pair plot

```{r}
(
  m_local_1
  %>% traces()
  %>% melt()
  %>% filter(!name %in% c(names(fixed_params_1), ivp_names_1))
  %>% ggplot(
    aes(
      x=iteration,
      y=value,
      group=.L1,
      color=factor(.L1)
    )
  )
  + geom_line()
  + guides(color="none")
  + facet_wrap(~name, scales="free_y")
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
pairs(
  ~(
    log_lik
    +Beta
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +sigmaSE
  ),
  data=subset(model_params_1 %>% filter(log_lik == log_lik), log_lik > max(log_lik) - 2000)
)
```

## Global Search

### Search box

```{r}
global_search_start_1 <- coef(m_local_mle_1)
s_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
e_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
i_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
r_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
Beta_guesses <- runif(Nreps_global, min = 1, max = 1000)
eps_A_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
f_ai_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
mu_rs_guesses <- runif(Nreps_global, min = 1e-3, max = 50) 
tau_guesses <- runif(Nreps_global, min = 0.01, max = 5)
rho_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
sigmaSE_guesses <- runif(Nreps_global, min = 0.001, max = 0.4)


global_guesses_1 <- as.data.frame(cbind(
  s_0 = s_0_guesses,
  e_0 = e_0_guesses,
  a_0 = a_0_guesses,
  i_0 = i_0_guesses,
  r_0 = r_0_guesses,
  Beta = Beta_guesses,
  eps_A = eps_A_guesses,
  f_ai = f_ai_guesses,
  mu_rs = mu_rs_guesses,
  tau = tau_guesses,
  rho = rho_guesses,
  sigmaSE = sigmaSE_guesses
))
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_global_1 <- foreach (guess=iter(global_guesses_1, "row"), .combine=c) %dopar% {
  (
    m_local_mle_1
    %>% mif2(Nmif=Nmif, params=c(fixed_params_1, unlist(guess)))
    %>% mif2(Nmif=Nmif, cooling.fraction.50 = 0.1)
  )
}
end <- Sys.time()
sprintf("Run time of global iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_global_all_1 <- (
  foreach(
    i=1:Nreps_global,
    .combine=rbind
  ) %dopar% {
    logmeanexp(
      replicate(
        Nreps_eval,
        logLik(pfilter(m_1, params=coef(m_global_1[[i]]), Np=1000))
      ),
      se=TRUE
    )
  }
)
```

### Collect Results

```{r}
df_results_global_1 <- (
  data.frame(
    t(sapply(m_global_1, coef)),
    log_lik=loglik_global_all_1[,1],
    log_lik_se=loglik_global_all_1[,2]
  )
  %>% select(
    names(df_results_local_1)
  )
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_1)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_global_1, 
      file = model_output_filename_1, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostic

```{r}
model_params_1 <- read.table(
  model_output_filename_1,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_1$log_lik, digits=5)
```

#### Pair plot

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_1
  %>% filter(log_lik>max(log_lik) - 70)
  %>% bind_rows(global_guesses_1)
  %>% mutate(
    type = if_else(is.na(log_lik), "guess", "result")
  )
  %>% arrange(type)
)
pairs(
  ~(
    log_lik
    +Beta
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +sigmaSE
  ),
  data=res_to_plot,
  col=ifelse(res_to_plot$type == "guess", grey(0.5), "red")
)
```

#### Simulations from best model

```{r}
sims_global_best_ll_1 <- (
  m_global_1[[which.max(loglik_global_all_1[,1])]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_ll_agg_1 <- (
  sims_global_best_ll_1
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)

sims_global_best_sd_1 <- (
  m_global_1[[which.min(loglik_global_all_1[,2])]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_sd_agg_1 <- (
  sims_global_best_sd_1
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 6
p1 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_ll_agg_1,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_ll_agg_1,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
p2 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_sd_agg_1,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_sd_agg_1,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
p1/p2
```

## Bayes Search

### Prior Functions

```{r}
rprior_1 <- Csnippet("
  s_0 = rbeta(1, 1);
  e_0 = rbeta(1, 1);
  a_0 = rbeta(1, 1);
  i_0 = rbeta(1, 1);
  r_0 = rbeta(1, 1);
  Beta = rgamma(Beta_0, Beta_1);
  f_ai = rbeta(f_ai_0, f_ai_1);
  eps_A = rbeta(eps_A_0, eps_A_1);
  mu_rs = rgamma(mu_rs_0, mu_rs_1);
  tau = rgamma(tau_0, tau_1);
  rho = rbeta(rho_0, rho_1);
  sigmaSE = rgamma(sigmaSE_0, sigmaSE_1);
")

dprior_1 <- Csnippet("
  lik = (
    dbeta(s_0, 1, 1, give_log)
    + dbeta(e_0, 1, 1, give_log)
    + dbeta(a_0, 1, 1, give_log)
    + dbeta(i_0, 1, 1, give_log)
    + dbeta(r_0, 1, 1, give_log)
    + dgamma(Beta, Beta_0, Beta_1, give_log)
    + dbeta(f_ai, f_ai_0, f_ai_1, give_log)
    + dbeta(eps_A, eps_A_0, eps_A_1, give_log)
    + dgamma(mu_rs, mu_rs_0, mu_rs_1, give_log)
    + dgamma(tau, tau_0, tau_1, give_log)
    + dbeta(rho, rho_0, rho_1, give_log)
    + dgamma(sigmaSE, sigmaSE_0, sigmaSE_1, give_log)
  );
  if (!give_log) lik = exp(lik);
")
```

### Prior params

```{r}
test_x <- seq(0, 1, by=0.1)
test_y <- dgamma(test_x, shape=1, scale=0.1)
# test_y <- dexp(test_x, 1/100)
plot(test_x, test_y)
```

```{r}
test_x <- seq(0, 1, by=0.01)
test_y <- dbeta(test_x, 2, 6)
plot(test_x, test_y)
```

### Approximate modeling

```{r}
prior_params_1 <- c(
  Beta_0 = 6,
  Beta_1 = 200,
  f_ai_0 = 5,
  f_ai_1 = 2,
  eps_A_0 = 2,
  eps_A_1 = 6,
  mu_rs_0 = 2,
  mu_rs_1 = 1,
  tau_0 = 2,
  tau_1 = 1,
  rho_0 = 6,
  rho_1 = 2,
  sigmaSE_0 = 1,
  sigmaSE_1 = 0.1
)
```

NOTE: I think that the bsmc2 algorithm uses time zero in a different manner from the particle filter so it needs to be changed to the starting point of the actual data

```{r}
start <- Sys.time()
bayes_start_model_1 <- m_global_1[[which.max(loglik_global_all_1[,1])]]
m_bayes_1 <- (
  bayes_start_model_1
  %>% pomp(
    # t0 = df_model$date[1],
    rprior = rprior_1,
    dprior = dprior_1,
    paramnames = c(paramnames_1, names(prior_params_1)),
    params = c(
      coef(bayes_start_model_1),
      prior_params_1
    )
  )
)
m_bayesapprox_1 <- bsmc2(
  data = m_bayes_1,
  Np=10000
)
end <- Sys.time()
sprintf("Run time of bsmc: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
df_bayesapprox_1 <- (
  m_bayesapprox_1
  %>% as.data.frame()
  %>% select(c(all_of(paramnames_1), .id))
)
```

```{r}
#| fig-width: 8
#| fig-height: 8
(
  df_bayesapprox_1
  %>% group_by(.id)
  %>% slice_sample(n=1000)
  %>% ungroup()
  %>% mutate(
    .id = factor(.id, levels=c("prior", "posterior")), 
  )
  %>% arrange(.id)
  %>% ggpairs(
    aes(color=.id, alpha=.id, fill=.id),
    columns = names(global_guesses_1),
    upper = list(continuous = "points"),
    progress = FALSE,
  )
  + scale_color_manual(
    values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_fill_manual(values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_alpha_manual(values = c("posterior" = 0.5, "prior" = 0.2))
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    plot.background = element_blank(),
    strip.background = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8)
  )
)
```

#### Simulations from parameter posterior

```{r}
approx_post_samples_1 <- (
  df_bayesapprox_1
  %>% filter(.id == "posterior")
  %>% select(-.id)
  %>% sample_n(100)
)
```

```{r}
approx_post_sims_1 <- (
  foreach (
    sample=iter(approx_post_samples_1, "row"),
    .combine=rbind
  ) %dopar% {
    (
      bayes_start_model_1
      # %>% pomp(
      #   paramnames = c(paramnames_1),
      #   params = c(
      #     coef(bayes_start_model_1),
      #     prior_params_1
      #   )
      # )
      %>% simulate(
        nsim = 1,
        paramnames = c(paramnames_1),
        params = unlist(sample),
        format = "data.frame",
        include.data = FALSE
      )
    )
  }
)
```

```{r}
approx_post_sims_agg_1 <- (
  approx_post_sims_1
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 3
(
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = approx_post_sims_agg_1,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = approx_post_sims_agg_1,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + scale_y_continuous(limits = c(0, 120))
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
```

### PMCMC - pomp

#### Proposal

```{r}
prop_logit <- 0.05
bayes_sd_1 <- c(
  s_0 = prop_logit,
  e_0 = prop_logit,
  a_0 = prop_logit,
  i_0 = prop_logit,
  r_0 = prop_logit,
  Beta = 0.5,
  eps_A = 0.25,
  f_ai = 0.25,
  mu_rs = 0.4,
  tau = 0.2,
  rho = 0.05
)
```

#### Run search

```{r}
start <- Sys.time()
m_bayes_1 <- (
  foreach (
    i = 1:5, 
    .combine = c
  ) %dopar% {
    pmcmc(
      m_bayesapprox_1,
      Nmcmc=10000, #Nbayes_iter,  # 40000
      Np=100,
      proposal = mvn_diag_rw(bayes_sd_1)
      # proposal=mvn_rw_adaptive(
      #   bayes_sd_1,
      #   scale.start = 100,
      #   scale.cooling = 0.99,
      #   # shape.start = 2000
      #   shape.start = 500
      # )
    )
  }
)
end <- Sys.time()
sprintf("Run time of pmcmc for %d iterations: %d minutes", Nbayes_iter, as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
#| fig-width: 12
#| fig-asp: 1
plot(
  m_bayes_1,
  pars = c(
    "loglik",
    "log.prior",
    "Beta",
    "f_ai",
    "eps_A",
    "mu_rs",
    "tau",
    "rho"
  )
)
```

```{r}
datalist <- list()
for (i in 1:length(m_bayes_1)) {
  datalist[[i]] <- (
    traces(m_bayes_1[[i]]) 
    %>% as.data.frame() 
    %>% select(paramnames_1)
    %>% tail(1000)
  )
}
df_bayes_1 <- bind_rows(datalist)
```

```{r}
#| fig-width: 8
#| fig-height: 8
(
  df_bayes_1
  %>% ggpairs(
    columns = names(global_guesses_1),
    lower = "blank",
    upper = list(continuous = wrap("points", alpha = 0.3)),
    progress = FALSE,
  )
  + theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
)
```

### PMCMC - RBI

#### Model definition

```{r}
m_rbi_1 <- "
  model m_rbi_1 {
    const mu_latend = 1 / ((5/7) / 52) 
    const mu_ar = 1 / ((10/7) / 52)
    const mu_ir = 1 / ((10/7) / 52)  
    const timestep = 1/52/7
    
    param s_0, e_0, a_0, i_0, r_0, Beta, eps_A, f_ai, mu_rs, tau, rho
    state S, E, A, I, R, C, N
    
    noise dw
    input N_0, birthrate, deathrate, cov
    
    obs reports
    
    sub parameter {
      s_0 ~ beta(1, 1)
      e_0 ~ beta(1, 1)
      a_0 ~ beta(1, 1)
      i_0 ~ beta(1, 1)
      r_0 ~ beta(1, 1)
      Beta ~ gamma(20, 10)
      eps_A ~ beta(5, 2)
      f_ai ~ beta(2, 6)
      mu_rs ~ gamma(2, 1)
      tau ~ gamma(2, 1)
      rho ~ beta(1, 1)
    }
    
    sub initial {
      S = nearbyint(s_0*N_0)
      E = nearbyint(e_0*N_0)
      A = nearbyint(a_0*N_0)
      I = nearbyint(i_0*N_0)
      R = nearbyint(r_0*N_0)
      C = 0
    }
    
    sub transition (delta = timestep) {
      exposure ~ binomial(S, 1 - exp(-timestep * Beta * (I + eps_A * A) / N))
"
```

# With Covariate Modulation

```{r}
model_output_filename_2 <- file.path(output_dir, "uvira_multioutbreak_cov.csv")
```

## Model Definition

### Fixed Parameters

```{r}
N_0 <- uvira_pop_2016
mu_latend <- 1 / ((5/7) / 52) # inverse of latent period (5 days transformed in weeks)
mu_ar <- 1 / ((10/7) / 52) # inverse of asymptomatic period (10 days transformed in weeks)
mu_ir <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)

fixed_params_2 <- c(
  N_0 = N_0,
  mu_latend = mu_latend,
  mu_ar = mu_ar,
  mu_ir = mu_ir
)
```

### Initialization Function

```{r}
rinit_2 <- Csnippet("
  double m = N_0/(s_0+e_0+a_0+i_0+r_0);
  S = nearbyint(s_0*m);
  E = nearbyint(e_0*m);
  A = nearbyint(a_0*m);
  I = nearbyint(i_0*m);
  R = nearbyint(r_0*m);
  N = S + E + A + I + R;
  C = 0;
  W = 0;
")
```

### Step Function

```{r}
rproc_2 <- Csnippet("
  //double foi, births;
  double foi, births, dw;
  double rate[11];
  double trans[11];

  // Poisson births
  births = rpois(birthrate * N * dt);

  // expected force of infection
  foi = (a_cov + b_cov * cov)*(I + eps_A * A)/N;
  
  // white noise (extrademographic stochasticity)
  dw = rgammawn(sigmaSE,dt);

  //rate[0] = foi;  // stochastic force of infection
  rate[0] = foi*dw/dt;  // stochastic force of infection
  rate[1] = deathrate;        // natural death rate
  rate[2] = mu_latend * f_ai;      // transition to asymp
  rate[3] = mu_latend * (1 - f_ai); // transition to symp
  rate[4] = deathrate;        // natural death rate
  rate[5] = mu_ar;       // asymp -> recovery
  rate[6] = deathrate;        // natural death rate
  rate[7] = mu_ir;       // symp -> recovered
  rate[8] = deathrate;        // natural death rate
  rate[9] = mu_rs;       // recovered -> susceptible
  rate[10] = deathrate;        // natural death rate

  // transitions between classes
  reulermultinom(2, S, &rate[0], dt, &trans[0]);
  reulermultinom(3, E, &rate[2], dt, &trans[2]);
  reulermultinom(2, A, &rate[5], dt, &trans[5]);
  reulermultinom(2, I, &rate[7], dt, &trans[7]);
  reulermultinom(2, R, &rate[9], dt, &trans[9]);

  S += births - trans[0] - trans[1] + trans[9];
  E += trans[0] - trans[2] - trans[3] - trans[4];
  A += trans[2] - trans[5] - trans[6];
  I += trans[3] - trans[7] - trans[8];
  R += trans[5] + trans[7] - trans[9] - trans[10];
  
  // Measured
  C += trans[3];
  
  // Noise
  W += (dw - dt)/sigmaSE; 

  N = S + E + A + I + R;
")
```

### Observation Function

```{r}
# dmeas_2 <- Csnippet("
#   double tol = 1.0e-25;
#   double mean_reports = rho*C;
#   double sd_reports = sqrt(pow(tau*C,2) + mean_reports);
#   if(reports > 0.0){
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0)
#       - pnorm(reports-0.5,mean_reports,sd_reports,1,0) + tol;
#   } else{
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0) + tol;
#   }
#   if (give_log) lik = log(lik);
# ")

dmeas_2 <- Csnippet("
  double f;
  if (tau > 0.0) {
    f = dnbinom_mu(nearbyint(reports), 1.0/tau, rho*C, give_log);
  }
  else {
    f = dpois(nearbyint(reports), rho*C, give_log);
  }
  lik = (give_log) ? f : exp(f);
")


# rmeas_2 <- Csnippet("
#   reports = rnorm(rho*C, sqrt(pow(tau*C,2) + rho*C));
#   if (reports > 0.0) {
#     reports = nearbyint(reports);
#   } else {
#     reports = 0.0;
#   }")


rmeas_2 <- Csnippet("
  if (tau > 0.0) {
    reports = rnbinom_mu(1.0/tau, rho*C);
  }
  else {
    reports = rpois(rho*C);
  }
")
```

## Initial parameter estimates

```{r}
# initial guesses
sigmaSE_guess <- 0.01
a_cov_guess <- 50
b_cov_guess <- 200
eps_A_guess <- 0.08
f_ai_guess <- 0.75
mu_rs_guess <- 1 / ((150/7) / 52) # inverse of immunity period (50 days transformed in weeks)
rho_guess <- 0.03
s_0_guess <- 0.55
i_0_guess <- 0.005 
a_0_guess <- 0.01 
e_0_guess <- 0.02
r_0_guess <- max(1 - s_0_guess - e_0_guess - a_0_guess - i_0_guess, 0)
tau_guess <- 0.01

init_params_2 <- c(
  fixed_params_2,
  sigmaSE = sigmaSE_guess,
  s_0 = s_0_guess,
  e_0 = e_0_guess,
  a_0 = a_0_guess,
  i_0 = i_0_guess,
  r_0 = r_0_guess,
  a_cov = a_cov_guess,
  b_cov = b_cov_guess,
  eps_A = eps_A_guess,
  f_ai = f_ai_guess,
  mu_rs = mu_rs_guess,
  tau = tau_guess,
  rho = rho_guess
)
```

## POMP object

```{r}
statenames_2 <- c(
  "S", 
  "E", 
  "A", 
  "I",
  "R", 
  "C",
  "W",
  "N"
)
obsnames_2 <- "reports"
covar_2 <- covariate_table(
  df_covar %>% select(c(date, cov, birthrate, deathrate, dis)),
  times="date"
)
covarnames_2 <- c(
  "cov",
  "birthrate", 
  "deathrate",
  "dis"
)
rp_names_log_2 <- c(
  "sigmaSE",
  "a_cov",
  "b_cov",
  "tau",
  "mu_rs"
)
rp_names_logit_2 <- c(
  "f_ai",
  "eps_A",
  "rho"
)
ivp_names_2 <- c(
  "s_0",
  "e_0",
  "a_0",
  "i_0",
  "r_0"
)
paramnames_2 <- c(rp_names_log_2, rp_names_logit_2, ivp_names_2, names(fixed_params_2))
accumvars_2 <- c(
  "C",
  "W"
)
partrans_2 <- parameter_trans(
  log=rp_names_log_2,
  # logit=c(rp_names_logit_2, ivp_names_2)
  logit=rp_names_logit_2,
  barycentric=ivp_names_2
)

m_2 <- (
  df_model
  %>% select(date, reports)
  %>% pomp(
    times = "date",
    t0 = df_covar$date[1],
    rprocess = euler(
      step.fun = rproc_2,
      delta.t = 1/52/7
    ),
    rinit = rinit_2,
    rmeasure = rmeas_2,
    dmeasure = dmeas_2,
    obsnames = obsnames_2,
    covar = covar_2,
    covarnames = covarnames_2,
    accumvars = accumvars_2,
    statenames = statenames_2,
    paramnames = paramnames_2,
    partrans = partrans_2,
    params = init_params_2
  )
)
```

## Simulations

```{r}
sims_2 <- (
  m_2
  %>% simulate(
    nsim = 20,
    format = "data.frame",
    include.data = TRUE
  )
)
```

```{r}
pf_sim_2 <- pfilter(m_2, Np = 1000)
lk_sim_2 <- logLik(pf_sim_2)
lk_sim_2
```

```{r}
(
  sims_2
  %>% filter(.id == 1)
  %>% select(
    date,
    S,
    E,
    A,
    I,
    C,
    R,
    N,
    W
  )
  %>% pivot_longer(
    cols = -date,
    names_to = "compartment",
    values_to = "counts"
  )
  %>% ggplot(
    aes(x = date, y = counts, color = compartment)
  )
  + facet_wrap(~compartment, scales = "free_y")
  + geom_line()
  + guides(color = "none")
)
```

```{r}
#| fig-width: 4.5
#| fig-height: 3
(
  sims_2
  %>% mutate(
    date = as.Date("2016-01-01") + 7 * date
  )
  %>% ggplot(
    aes(x = date, y = reports, group=.id, color=.id=="data")
  )
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line()
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases",
    x = "Date",
    y = "Counts"
  )
)
```

## Local Search

```{r}
# Parameters 
rw.sd_rp <- 0.02
rw.sd_ivp <- 0.2
cooling.fraction.50 <- 0.5 # Level of parameter variance after 50% of iterations
rw.sd_2 <- rw_sd(
  sigmaSE = rw.sd_rp,
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  r_0 = ivp(rw.sd_ivp),
  a_cov = rw.sd_rp,
  b_cov = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_ai = rw.sd_rp,
  mu_rs = rw.sd_rp,
  tau = rw.sd_rp,
  rho = rw.sd_rp
)
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_local_2 <- foreach (
  i=1:Nreps_local, 
  .combine=c 
) %dopar% {
  init_params_2[rp_names_log_2] <- rlnorm(
    n=length(rp_names_log_2), 
    meanlog=log(init_params_2[rp_names_log_2]),
    sdlog=1
  )
  init_params_2[c(rp_names_logit_2, ivp_names_2)] <- runif(
    n=length(c(rp_names_logit_2, ivp_names_2)),
    min=0.01,
    max=0.99
  )
  (
    mif2(
      m_2,
      Np=Np,
      Nmif=Nmif,
      params=init_params_2,
      cooling.fraction.50 = cooling.fraction.50,
      rw.sd=rw.sd_2
    )
  )
}
end <- Sys.time()
sprintf("Run time of local iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_local_all_2 <- foreach(
  mf = m_local_2,
  .combine=rbind
) %dopar% {
  pf <- replicate(
    n = Nreps_eval,
    logLik(pfilter(mf, Np = Np))
  )
  logmeanexp(pf, se = TRUE)
}
```

Focus on the highest estimated likelihood to get MLE

```{r}
m_local_mle_2 <- m_local_2[[which.max(loglik_local_all_2[,1])]]
params_local_2 <- coef(m_local_mle_2)
loglik_local_best_2 <- logmeanexp(
  replicate(
    n = Nreps_eval,
    logLik(pfilter(m_local_mle_2, Np = 1000))
  ),
  se = TRUE
)
```

```{r}
loglik_local_best_2
```

### Collect Results

```{r}
df_results_local_2 <- data.frame(
  t(sapply(m_local_2, coef)),
  log_lik=loglik_local_all_2[,1],
  log_lik_se=loglik_local_all_2[,2]
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_2)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_local_2, 
      file = model_output_filename_2, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostics

```{r}
model_params_2 <- read.table(
  model_output_filename_2,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_2$log_lik, digits = 5)
```

#### Pair plot

```{r}
(
  m_local_2
  %>% traces()
  %>% melt()
  %>% filter(!name %in% c(names(fixed_params_2), ivp_names_2))
  %>% ggplot(
    aes(
      x=iteration,
      y=value,
      group=.L1,
      color=factor(.L1)
    )
  )
  + geom_line()
  + guides(color="none")
  + facet_wrap(~name, scales="free_y")
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +sigmaSE
  ),
  data=subset(model_params_2, log_lik > max(log_lik) - 500)
)
```

## Global Search

### Search box

```{r}
sigmaSE_guesses <- runif(Nreps_global, min = 0.003, max = 0.2)
s_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
e_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
i_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
r_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_cov_guesses <- runif(Nreps_global, min = 0, max = 100)
b_cov_guesses <- runif(Nreps_global, min = 2, max = 200)
eps_A_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
f_ai_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
mu_rs_guesses <- runif(Nreps_global, min = 1e-3, max = 50)
rho_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
tau_guesses <- runif(Nreps_global, min = 1e-4, max = 5)

global_guesses_2 <- as.data.frame(cbind(
  sigmaSE = sigmaSE_guesses,
  s_0 = s_0_guesses,
  e_0 = e_0_guesses,
  a_0 = a_0_guesses,
  i_0 = i_0_guesses,
  r_0 = r_0_guesses,
  a_cov = a_cov_guesses,
  b_cov = b_cov_guesses,
  eps_A = eps_A_guesses,
  f_ai = f_ai_guesses,
  mu_rs = mu_rs_guesses,
  tau = tau_guesses,
  rho = rho_guesses
))
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_global_2 <- foreach (guess=iter(global_guesses_2, "row"), .combine=c) %dopar% {
  (
    m_local_mle_2
    %>% mif2(Nmif=Nmif, params=c(fixed_params_2, unlist(guess)))
    %>% mif2(Nmif=Nmif, cooling.fraction.50 = 0.1)
  )
}
end <- Sys.time()
sprintf("Run time of global iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_global_all_2 <- (
  foreach(
    i=1:Nreps_global,
    .combine=rbind
  ) %dopar% {
    logmeanexp(
      replicate(
        Nreps_eval,
        logLik(pfilter(m_2, params=coef(m_global_2[[i]]), Np=1000))
      ),
      se=TRUE
    )
  }
)
```

### Collect Results

```{r}
df_results_global_2 <- (
  data.frame(
    t(sapply(m_global_2, coef)),
    log_lik=loglik_global_all_2[,1],
    log_lik_se=loglik_global_all_2[,2]
  )
  %>% select(
    names(df_results_local_2)
  )
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_2)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_global_2, 
      file = model_output_filename_2, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostic

```{r}
model_params_2 <- read.table(
  model_output_filename_2,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_2$log_lik, digits=5)
```

#### Pair plot

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_2
  %>% filter(log_lik == log_lik)
  %>% filter(log_lik>max(log_lik) - 100)
  %>% bind_rows(global_guesses_2)
  %>% mutate(
    type = if_else(is.na(log_lik), "guess", "result")
  )
  %>% arrange(type)
)
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +sigmaSE
  ),
  data=res_to_plot,
  col=ifelse(res_to_plot$type == "guess", grey(0.5), "red")
)
```

#### Simulations from best model

```{r}
sims_global_best_ll_2 <- (
  m_global_2[[which(rank(-loglik_global_all_2[,1]) == 3)]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = FALSE
  )
)
sims_global_best_ll_agg_2 <- (
  sims_global_best_ll_2
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)

sims_global_best_sd_2 <- (
  m_global_2[[which.min(loglik_global_all_2[,2])]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = FALSE
  )
)
sims_global_best_sd_agg_2 <- (
  sims_global_best_sd_2
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 6
p1 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_ll_agg_2,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_ll_agg_2,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
p2 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_sd_agg_2,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_sd_agg_2,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best SD",
    x = "Date",
    y = "Counts"
  )
)
p1/p2
```

## Bayes Search

### Prior Functions

```{r}
rprior_2 <- Csnippet("
  s_0 = rbeta(1, 1);
  e_0 = rbeta(1, 1);
  a_0 = rbeta(1, 1);
  i_0 = rbeta(1, 1);
  r_0 = rbeta(1, 1);
  a_cov = rgamma(a_cov_0, a_cov_1);
  b_cov = rgamma(b_cov_0, b_cov_1);
  f_ai = rbeta(f_ai_0, f_ai_1);
  eps_A = rbeta(eps_A_0, eps_A_1);
  mu_rs = rgamma(mu_rs_0, mu_rs_1);
  tau = rgamma(tau_0, tau_1);
  rho = rbeta(rho_0, rho_1);
  sigmaSE = rgamma(sigmaSE_0, sigmaSE_1);
")

dprior_2 <- Csnippet("
  lik = (
    dbeta(s_0, 1, 1, give_log)
    + dbeta(e_0, 1, 1, give_log)
    + dbeta(a_0, 1, 1, give_log)
    + dbeta(i_0, 1, 1, give_log)
    + dbeta(r_0, 1, 1, give_log)
    + dgamma(a_cov, a_cov_0, a_cov_1, give_log)
    + dgamma(b_cov, b_cov_0, b_cov_1, give_log)
    + dbeta(f_ai, f_ai_0, f_ai_1, give_log)
    + dbeta(eps_A, eps_A_0, eps_A_1, give_log)
    + dgamma(mu_rs, mu_rs_0, mu_rs_1, give_log)
    + dgamma(tau, tau_0, tau_1, give_log)
    + dbeta(rho, rho_0, rho_1, give_log)
    + dgamma(sigmaSE, sigmaSE_0, sigmaSE_1, give_log)
  );
  if (!give_log) lik = exp(lik);
")
```

### Prior params

```{r}
test_x <- seq(0, 100, by=0.1)
test_y <- dgamma(test_x, shape=2, scale=10)
# test_y <- dexp(test_x, 1/100)
plot(test_x, test_y)
```

```{r}
test_x <- seq(0, 1, by=0.01)
test_y <- dbeta(test_x, 1, 1)
plot(test_x, test_y)
```

```{r}
prior_params_2 <- c(
  sigmaSE_0 = 0.1,
  sigmaSE_1 = 1,
  a_cov_0 = 3,
  a_cov_1 = 200,
  b_cov_0 = 3,
  b_cov_1 = 200,
  f_ai_0 = 2,
  f_ai_1 = 2,
  eps_A_0 = 2,
  eps_A_1 = 6,
  mu_rs_0 = 2,
  mu_rs_1 = 15,
  tau_0 = 2,
  tau_1 = 1,
  rho_0 = 6,
  rho_1 = 2
)
```

### Approximate modeling

```{r}
start <- Sys.time()
bayes_start_model_2 <- m_global_2[[which.min(loglik_global_all_2[,2])]] 
m_bayes_2 <- (
  bayes_start_model_2
    %>% pomp(
      # t0 = df_model$date[1],
      rprior = rprior_2,
      dprior = dprior_2,
      paramnames = c(paramnames_2, names(prior_params_2)),
      params = c(
        coef(bayes_start_model_2),
        prior_params_2
      )
  )
)
m_bayesapprox_2 <- bsmc2(
  data = m_bayes_2,
  Np=10000
)
end <- Sys.time()
sprintf("Run time of bsmc: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
df_bayesapprox_2 <- (
  m_bayesapprox_2
  %>% as.data.frame()
  %>% select(c(all_of(paramnames_2), .id))
)
```

```{r}
#| fig-width: 8
#| fig-height: 8
(
  df_bayesapprox_2
  %>% group_by(.id)
  %>% slice_sample(n=1000)
  %>% ungroup()
  %>% mutate(
    .id = factor(.id, levels=c("prior", "posterior")), 
  )
  %>% arrange(.id)
  %>% ggpairs(
    aes(color=.id, alpha=.id, fill=.id),
    columns = names(global_guesses_2),
    upper = list(continuous = "points"),
    progress = FALSE,
  )
  + scale_color_manual(
    values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_fill_manual(values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_alpha_manual(values = c("posterior" = 0.5, "prior" = 0.2))
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    plot.background = element_blank(),
    strip.background = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8)
  )
)
```

#### Simulations from parameter posterior

```{r}
approx_post_samples_2 <- (
  df_bayesapprox_2
  %>% filter(.id == "posterior")
  %>% select(-.id)
  %>% sample_n(100)
)
```

```{r}
approx_post_sims_2 <- (
  foreach (
    sample=iter(approx_post_samples_2, "row"),
    .combine=rbind
  ) %dopar% {
    (
      m_2
      %>% simulate(
        nsim = 1,
        params = unlist(sample),
        format = "data.frame",
        include.data = FALSE
      )
    )
  }
)
```

```{r}
approx_post_sims_agg_2 <- (
  approx_post_sims_2
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 3
(
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = approx_post_sims_agg_2,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = approx_post_sims_agg_2,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + scale_y_continuous(limits = c(0, 120))
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
```

### PMCMC

#### Proposal

```{r}
# prop_logit <- 0.05
# bayes_sd_2 <- c(
#   s_0 = prop_logit,
#   e_0 = prop_logit,
#   a_0 = prop_logit,
#   i_0 = prop_logit,
#   r_0 = prop_logit,
  # a_cov = 4,
  # b_cov = 4,
#   eps_A = 0.1,
#   f_ai = 0.1,
#   mu_rs = 2,
#   tau = 0.5,
#   rho = 0.1
# )
prop_logit <- 0.001
# bayes_sd_2 <- c(
#   s_0 = prop_logit,
#   e_0 = prop_logit,
#   a_0 = prop_logit,
#   i_0 = prop_logit,
#   r_0 = prop_logit,
#   a_cov = 0.5,
#   b_cov = 0.5,
#   eps_A = 0.25,
#   f_ai = 0.25,
#   mu_rs = 0.4,
#   tau = 0.2,
#   rho = 0.05
# )
bayes_sd_2 <- c(
  s_0 = prop_logit,
  e_0 = prop_logit,
  a_0 = prop_logit,
  i_0 = prop_logit,
  r_0 = prop_logit,
  a_cov = prop_logit,
  b_cov = prop_logit,
  eps_A = prop_logit,
  f_ai = prop_logit,
  mu_rs = prop_logit,
  tau = prop_logit,
  rho = prop_logit
)
```

#### Run search

```{r}
start <- Sys.time()
m_bayesfull_2 <- (
  foreach (
    i = 1:5, 
    .combine = c
  ) %dopar% {
    pmcmc(
      m_bayes_2,
      # m_bayesapprox_2,
      Nmcmc=40000, #Nbayes_iter,  # 40000
      Np=100,
      # proposal=mvn_diag_rw(bayes_sd_2)
      proposal=mvn_rw_adaptive(
        bayes_sd_2,
        scale.start = 100,
        scale.cooling = 0.99,
        shape.start = 2000
        # shape.start = 100
      )
    )
  }
)
end <- Sys.time()
as.integer(round(difftime(end, start, units='mins')))
```

```{r}
test <- m_bayesfull_2
```

```{r}
#| fig-width: 12
#| fig-asp: 1
plot(
  m_bayesfull_2,
  pars = c(
    "loglik",
    "log.prior",
    "a_cov",
    "b_cov",
    "f_ai",
    "eps_A",
    "mu_rs",
    "tau",
    "rho"
  )
)
```

```{r}
datalist <- list()
for (i in 1:length(m_bayes_2)) {
  datalist[[i]] <- (
    traces(m_bayes_2[[i]]) 
    %>% as.data.frame() 
    %>% select(paramnames_2)
    %>% tail(1000)
  )
}
df_bayes_2 <- bind_rows(datalist)
```

```{r}
#| fig-width: 8
#| fig-height: 8
(
  df_bayes_2
  %>% ggpairs(
    columns = names(global_guesses_2),
    lower = "blank",
    upper = list(continuous = wrap("points", alpha = 0.3)),
    progress = FALSE,
  )
  + theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
)
```

# With Exponentiated Covariate Modulation

```{r}
model_output_filename_3 <- file.path(output_dir, "uvira_multioutbreak_cov_exp.csv")
```

## Model Definition

### Fixed Parameters

```{r}
N_0 <- uvira_pop_2016
mu_latend <- 1 / ((5/7) / 52) # inverse of latent period (5 days transformed in weeks)
mu_ar <- 1 / ((10/7) / 52) # inverse of asymptomatic period (10 days transformed in weeks)
mu_ir <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)

fixed_params_3 <- c(
  N_0 = N_0,
  mu_latend = mu_latend,
  mu_ar = mu_ar,
  mu_ir = mu_ir
)
```

### Initialization Function

```{r}
rinit_3 <- Csnippet("
  double m = N_0/(s_0+e_0+a_0+i_0+r_0);
  S = nearbyint(s_0*m);
  E = nearbyint(e_0*m);
  A = nearbyint(a_0*m);
  I = nearbyint(i_0*m);
  R = nearbyint(r_0*m);
  N = S + E + A + I + R;
  C = 0;
  W = 0;
")
```

### Step Function

```{r}
rproc_3 <- Csnippet("
  //double foi, births;
  double foi, births, dw;
  double rate[11];
  double trans[11];

  // Poisson births
  births = rpois(birthrate * N * dt);

  // expected force of infection
  foi = (a_cov + b_cov * pow(cov, 1+e_cov))*(I + eps_A * A)/N;
  
  // white noise (extrademographic stochasticity)
  dw = rgammawn(sigmaSE,dt);

  //rate[0] = foi;  // stochastic force of infection
  rate[0] = foi*dw/dt;  // stochastic force of infection
  rate[1] = deathrate;        // natural death rate
  rate[2] = mu_latend * f_ai;      // transition to asymp
  rate[3] = mu_latend * (1 - f_ai); // transition to symp
  rate[4] = deathrate;        // natural death rate
  rate[5] = mu_ar;       // asymp -> recovery
  rate[6] = deathrate;        // natural death rate
  rate[7] = mu_ir;       // symp -> recovered
  rate[8] = deathrate;        // natural death rate
  rate[9] = mu_rs;       // recovered -> susceptible
  rate[10] = deathrate;        // natural death rate

  // transitions between classes
  reulermultinom(2, S, &rate[0], dt, &trans[0]);
  reulermultinom(3, E, &rate[2], dt, &trans[2]);
  reulermultinom(2, A, &rate[5], dt, &trans[5]);
  reulermultinom(2, I, &rate[7], dt, &trans[7]);
  reulermultinom(2, R, &rate[9], dt, &trans[9]);

  S += births - trans[0] - trans[1] + trans[9];
  E += trans[0] - trans[2] - trans[3] - trans[4];
  A += trans[2] - trans[5] - trans[6];
  I += trans[3] - trans[7] - trans[8];
  R += trans[5] + trans[7] - trans[9] - trans[10];
  
  // Measured
  C += trans[3];
  
  // Noise
  W += (dw - dt)/sigmaSE; 

  N = S + E + A + I + R;
")
```

### Observation Function

```{r}
# dmeas_3 <- Csnippet("
#   double tol = 1.0e-25;
#   double mean_reports = rho*C;
#   double sd_reports = sqrt(pow(tau*C,2) + mean_reports);
#   if(reports > 0.0){
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0)
#       - pnorm(reports-0.5,mean_reports,sd_reports,1,0) + tol;
#   } else{
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0) + tol;
#   }
#   if (give_log) lik = log(lik);
# ")

dmeas_3 <- Csnippet("
  double f;
  if (tau > 0.0) {
    f = dnbinom_mu(nearbyint(reports), 1.0/tau, rho*C, give_log);
  }
  else {
    f = dpois(nearbyint(reports), rho*C, give_log);
  }
  lik = (give_log) ? f : exp(f);
")

# rmeas_3 <- Csnippet("
#   reports = rnorm(rho*C, sqrt(pow(tau*C,2) + rho*C));
#   if (reports > 0.0) {
#     reports = nearbyint(reports);
#   } else {
#     reports = 0.0;
#   }")

rmeas_3 <- Csnippet("
  if (tau > 0.0) {
    reports = rnbinom_mu(1.0/tau, rho*C);
  }
  else {
    reports = rpois(rho*C);
  }
")
```

## Initial parameter estimates

```{r}
# initial guesses
a_cov_guess <- 100
b_cov_guess <- 250
e_cov_guess <- 2
eps_A_guess <- 0.08
f_ai_guess <- 0.75
mu_rs_guess <- 1 / ((150/7) / 52) # inverse of immunity period (50 days transformed in weeks)
rho_guess <- 0.03
s_0_guess <- 0.55
i_0_guess <- 0.005 
a_0_guess <- 0.01 
e_0_guess <- 0.02
r_0_guess <- max(1 - s_0_guess - e_0_guess - a_0_guess - i_0_guess, 0)
tau_guess <- 0.1
sigmaSE_guess <- 0.05

init_params_3 <- c(
  fixed_params_3,
  sigmaSE = sigmaSE_guess,
  s_0 = s_0_guess,
  e_0 = e_0_guess,
  a_0 = a_0_guess,
  i_0 = i_0_guess,
  r_0 = r_0_guess,
  a_cov = a_cov_guess,
  b_cov = b_cov_guess,
  e_cov = e_cov_guess,
  eps_A = eps_A_guess,
  f_ai = f_ai_guess,
  mu_rs = mu_rs_guess,
  tau = tau_guess,
  rho = rho_guess
)
```

## POMP object

```{r}
statenames_3 <- c(
  "S", 
  "E", 
  "A", 
  "I",
  "R", 
  "C",
  "W",
  "N"
)
obsnames_3 <- "reports"
covar_3 <- covariate_table(
  df_covar %>% select(c(date, cov, birthrate, deathrate)),
  times="date"
)
covarnames_3 <- c(
  "cov",
  "birthrate", 
  "deathrate"
)
rp_names_log_3 <- c(
  "sigmaSE",
  "a_cov",
  "b_cov",
  "e_cov",
  "tau",
  "mu_rs"
)
rp_names_logit_3 <- c(
  "f_ai",
  "eps_A",
  "rho"
)
ivp_names_3 <- c(
  "s_0",
  "e_0",
  "a_0",
  "i_0",
  "r_0"
)
paramnames_3 <- c(rp_names_log_3, rp_names_logit_3, ivp_names_3, names(fixed_params_3))
accumvars_3 <- c(
  "C",
  "W"
)
partrans_3 <- parameter_trans(
  log=rp_names_log_3,
  # logit=c(rp_names_logit_3, ivp_names_3)
  logit=rp_names_logit_3,
  barycentric=ivp_names_3
)

m_3 <- (
  df_model
  %>% select(date, reports)
  %>% pomp(
    times = "date",
    t0 = df_covar$date[1],
    rprocess = euler(
      step.fun = rproc_3,
      delta.t = 1/52/7
    ),
    rinit = rinit_3,
    rmeasure = rmeas_3,
    dmeasure = dmeas_3,
    obsnames = obsnames_3,
    covar = covar_3,
    covarnames = covarnames_3,
    accumvars = accumvars_3,
    statenames = statenames_3,
    paramnames = paramnames_3,
    partrans = partrans_3,
    params = init_params_3
  )
)
```

## Simulations

```{r}
sims_3 <- (
  m_3
  %>% simulate(
    nsim = 20,
    format = "data.frame",
    include.data = TRUE
  )
)
```

```{r}
pf_sim_3 <- pfilter(m_3, Np = 1000)
lk_sim_3 <- logLik(pf_sim_3)
lk_sim_3
```

```{r}
(
  sims_3
  %>% filter(.id == 1)
  %>% select(
    date, 
    S, 
    E, 
    A, 
    I, 
    C, 
    R, 
    W,
    N
  )
  %>% pivot_longer(
    cols = -date,
    names_to = "compartment",
    values_to = "counts"
  )
  %>% ggplot(
    aes(x = date, y = counts, color = compartment)
  )
  + facet_wrap(~compartment, scales = "free_y")
  + geom_line()
  + guides(color = "none")
)
```

```{r}
#| fig-width: 4.5
#| fig-height: 3
(
  sims_3
  %>% mutate(
    date = as.Date("2016-01-01") + 7 * date
  )
  %>% ggplot(
    aes(x = date, y = reports, group=.id, color=.id=="data")
  )
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line()
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases",
    x = "Date",
    y = "Counts"
  )
)
```

## Local Search

```{r}
# Parameters 
rw.sd_rp <- 0.02
rw.sd_ivp <- 0.2
cooling.fraction.50 <- 0.5 # Level of parameter variance after 50% of iterations
rw.sd_3 <- rw_sd(
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  r_0 = ivp(rw.sd_ivp),
  sigmaSE = rw.sd_rp,
  a_cov = rw.sd_rp,
  b_cov = rw.sd_rp,
  e_cov = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_ai = rw.sd_rp,
  mu_rs = rw.sd_rp,
  tau = rw.sd_rp,
  rho = rw.sd_rp
)
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_local_3 <- foreach (
  i=1:Nreps_local, 
  .combine=c 
) %dopar% {
  init_params_3[rp_names_log_3] <- rlnorm(
    n=length(rp_names_log_3), 
    meanlog=log(init_params_3[rp_names_log_3]),
    sdlog=1
  )
  init_params_3[c(rp_names_logit_3, ivp_names_3)] <- runif(
    n=length(c(rp_names_logit_3, ivp_names_3)),
    min=0.01,
    max=0.99
  )
  (
    mif2(
      m_3,
      Np=Np,
      Nmif=Nmif,
      params=init_params_3,
      cooling.fraction.50 = cooling.fraction.50,
      rw.sd=rw.sd_3
    )
  )
}
end <- Sys.time()
sprintf("Run time of local iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_local_all_3 <- foreach(
  mf = m_local_3,
  .combine=rbind
) %dopar% {
  pf <- replicate(
    n = Nreps_eval,
    logLik(pfilter(mf, Np = Np))
  )
  logmeanexp(pf, se = TRUE)
}
```

Focus on the highest estimated likelihood to get MLE

```{r}
m_local_mle_3 <- m_local_3[[which.max(loglik_local_all_3[,1])]]
params_local_3 <- coef(m_local_mle_3)
loglik_local_best_3 <- logmeanexp(
  replicate(
    n = Nreps_eval,
    logLik(pfilter(m_local_mle_3, Np = 1000))
  ),
  se = TRUE
)
```

```{r}
loglik_local_best_3
```

### Collect Results

```{r}
df_results_local_3 <- data.frame(
  t(sapply(m_local_3, coef)),
  log_lik=loglik_local_all_3[,1],
  log_lik_se=loglik_local_all_3[,2]
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_3)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_local_3, 
      file = model_output_filename_3, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostics

```{r}
model_params_3 <- read.table(
  model_output_filename_3,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_3$log_lik, digits = 5)
```

#### Pair plot

```{r}
(
  m_local_3
  %>% traces()
  %>% melt()
  %>% filter(!name %in% c(names(fixed_params_3), ivp_names_3))
  %>% ggplot(
    aes(
      x=iteration,
      y=value,
      group=.L1,
      color=factor(.L1)
    )
  )
  + geom_line()
  + guides(color="none")
  + facet_wrap(~name, scales="free_y")
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +e_cov
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +sigmaSE
  ),
  data=subset(model_params_3, log_lik > max(log_lik) - 2000)
)
```

## Global Search

### Search box

```{r}
s_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
e_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
i_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
r_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_cov_guesses <- runif(Nreps_global, min = 0, max = 500)
b_cov_guesses <- runif(Nreps_global, min = 2, max = 500)
e_cov_guesses <- runif(Nreps_global, min = 0, max = 4)
eps_A_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
f_ai_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
mu_rs_guesses <- runif(Nreps_global, min = 1e-3, max = 50)
rho_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
tau_guesses <- runif(Nreps_global, min = 1e-4, max = 5)
sigmaSE_guesses <- runif(Nreps_global, min = 0.001, max = 0.2)


global_guesses_3 <- as.data.frame(cbind(
  s_0 = s_0_guesses,
  e_0 = e_0_guesses,
  a_0 = a_0_guesses,
  i_0 = i_0_guesses,
  r_0 = r_0_guesses,
  sigmaSE = sigmaSE_guesses,
  a_cov = a_cov_guesses,
  b_cov = b_cov_guesses,
  e_cov = e_cov_guesses,
  eps_A = eps_A_guesses,
  f_ai = f_ai_guesses,
  mu_rs = mu_rs_guesses,
  tau = tau_guesses,
  rho = rho_guesses
))
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_global_3 <- foreach (guess=iter(global_guesses_3, "row"), .combine=c) %dopar% {
  (
    m_local_mle_3
    %>% mif2(Nmif=Nmif, params=c(fixed_params_3, unlist(guess)))
    %>% mif2(Nmif=Nmif, cooling.fraction.50 = 0.1)
  )
}
end <- Sys.time()
sprintf("Run time of global iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_global_all_3 <- (
  foreach(
    i=1:Nreps_global,
    .combine=rbind
  ) %dopar% {
    logmeanexp(
      replicate(
        Nreps_eval,
        logLik(pfilter(m_3, params=coef(m_global_3[[i]]), Np=1000))
      ),
      se=TRUE
    )
  }
)
```

### Collect Results

```{r}
df_results_global_3 <- (
  data.frame(
    t(sapply(m_global_3, coef)),
    log_lik=loglik_global_all_3[,1],
    log_lik_se=loglik_global_all_3[,2]
  )
  %>% select(
    names(df_results_local_3)
  )
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_3)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_global_3, 
      file = model_output_filename_3, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostic

```{r}
model_params_3 <- read.table(
  model_output_filename_3,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_3$log_lik, digits=5)
```

#### Pair plot

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_3
  %>% filter(log_lik>max(log_lik) - 70)
  %>% bind_rows(global_guesses_3)
  %>% mutate(
    type = if_else(is.na(log_lik), "guess", "result")
  )
  %>% arrange(type)
)
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +e_cov
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +sigmaSE
  ),
  data=res_to_plot,
  col=ifelse(res_to_plot$type == "guess", grey(0.5), "red")
)
```

#### Simulations from best model

```{r}
sims_global_best_ll_3 <- (
  m_global_3[[which(rank(-loglik_global_all_3[,1]) == 1)]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_ll_agg_3 <- (
  sims_global_best_ll_3
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)

sims_global_best_sd_3 <- (
  m_global_3[[which.min(loglik_global_all_3[,2])]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_sd_agg_3 <- (
  sims_global_best_sd_3
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 6
p1 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_ll_agg_3,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_ll_agg_3,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
p2 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_sd_agg_3,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_sd_agg_3,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best SD",
    x = "Date",
    y = "Counts"
  )
)
p1/p2
```

## Bayes Search

### Prior Functions

```{r}
rprior_3 <- Csnippet("
  s_0 = rbeta(1, 1);
  e_0 = rbeta(1, 1);
  a_0 = rbeta(1, 1);
  i_0 = rbeta(1, 1);
  r_0 = rbeta(1, 1);
  a_cov = rgamma(a_cov_0, a_cov_1);
  b_cov = rgamma(b_cov_0, b_cov_1);
  e_cov = rgamma(e_cov_0, e_cov_1);
  f_ai = rbeta(f_ai_0, f_ai_1);
  eps_A = rbeta(eps_A_0, eps_A_1);
  mu_rs = rgamma(mu_rs_0, mu_rs_1);
  tau = rgamma(tau_0, tau_1);
  rho = rbeta(rho_0, rho_1);
  sigmaSE = rgamma(sigmaSE_0, sigmaSE_1);
")

dprior_3 <- Csnippet("
  lik = (
    dbeta(s_0, 1, 1, give_log)
    + dbeta(e_0, 1, 1, give_log)
    + dbeta(a_0, 1, 1, give_log)
    + dbeta(i_0, 1, 1, give_log)
    + dbeta(r_0, 1, 1, give_log)
    + dgamma(a_cov, a_cov_0, a_cov_1, give_log)
    + dgamma(b_cov, b_cov_0, b_cov_1, give_log)
    + dgamma(e_cov, e_cov_0, e_cov_1, give_log)
    + dbeta(f_ai, f_ai_0, f_ai_1, give_log)
    + dbeta(eps_A, eps_A_0, eps_A_1, give_log)
    + dgamma(mu_rs, mu_rs_0, mu_rs_1, give_log)
    + dgamma(tau, tau_0, tau_1, give_log)
    + dbeta(rho, rho_0, rho_1, give_log)
    + dgamma(sigmaSE, sigmaSE_0, sigmaSE_1, give_log)
  );
  if (!give_log) lik = exp(lik);
")
```

### Prior params

```{r}
test_x <- seq(0, 10, by=0.1)
test_y <- dgamma(test_x, shape=6, scale=1)
# test_y <- dexp(test_x, 1/100)
plot(test_x, test_y)
```

```{r}
test_x <- seq(0, 1, by=0.01)
test_y <- dbeta(test_x, 2, 6)
plot(test_x, test_y)
```

```{r}
prior_params_3 <- c(
  sigmaSE_0 = 0.1,
  sigmaSE_1 = 1,
  a_cov_0 = 20,
  a_cov_1 = 10,
  b_cov_0 = 20,
  b_cov_1 = 10,
  e_cov_0 = 2,
  e_cov_1 = 1,
  f_ai_0 = 2,
  f_ai_1 = 2,
  eps_A_0 = 2,
  eps_A_1 = 6,
  mu_rs_0 = 6,
  mu_rs_1 = 1,
  tau_0 = 2,
  tau_1 = 1,
  rho_0 = 1,
  rho_1 = 1
)
```

### Approximate modeling

```{r}
start <- Sys.time()
bayes_start_model_3 <- m_global_3[[which.max(loglik_global_all_3[,1])]]
m_bayes_3 <- (
  m_3
    %>% pomp(
      # t0 = df_model$date[1],
      rprior = rprior_3,
      dprior = dprior_3,
      paramnames = c(paramnames_3, names(prior_params_3)),
      params = c(
        coef(m_3),
        prior_params_3
      )
  )
)
m_bayesapprox_3 <- bsmc2(
  data = m_bayes_3,
  Np=10000
)
end <- Sys.time()
sprintf("Run time of bsmc: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
df_bayesapprox_3 <- (
  m_bayesapprox_3
  %>% as.data.frame()
  %>% select(c(all_of(paramnames_3), .id))
)
```

```{r}
#| fig-width: 8
(
  df_bayesapprox_3
  %>% group_by(.id)
  %>% slice_sample(n=1000)
  %>% ungroup()
  %>% mutate(
    .id = factor(.id, levels=c("prior", "posterior")), 
  )
  %>% arrange(.id)
  %>% ggpairs(
    aes(color=.id, alpha=.id, fill=.id),
    columns = names(global_guesses_3),
    upper = list(continuous = "points"),
    progress = FALSE,
  )
  + scale_color_manual(
    values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_fill_manual(values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_alpha_manual(values = c("posterior" = 0.5, "prior" = 0.2))
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    plot.background = element_blank(),
    strip.background = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8)
  )
)
```

#### Simulations from parameter posterior

```{r}
approx_post_samples_3 <- (
  df_bayesapprox_3
  %>% filter(.id == "posterior")
  %>% select(-.id)
  %>% sample_n(100)
)
```

```{r}
approx_post_sims_3 <- (
  foreach (
    sample=iter(approx_post_samples_3, "row"),
    .combine=rbind
  ) %dopar% {
    (
      m_3
      %>% simulate(
        nsim = 1,
        params = unlist(sample),
        format = "data.frame",
        include.data = FALSE
      )
    )
  }
)
```

```{r}
approx_post_sims_agg_3 <- (
  approx_post_sims_3
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 3
(
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = approx_post_sims_agg_3,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = approx_post_sims_agg_3,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + scale_y_continuous(limits = c(0, 120))
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
```

### PMCMC

#### Proposal

```{r}
prop_logit <- 0.05
bayes_sd_3 <- c(
  s_0 = prop_logit,
  e_0 = prop_logit,
  a_0 = prop_logit,
  i_0 = prop_logit,
  r_0 = prop_logit,
  a_cov = 0.5,
  b_cov = 0.5,
  e_cov = 0.1,
  eps_A = 0.25,
  f_ai = 0.25,
  mu_rs = 0.4,
  tau = 0.2,
  rho = 0.05
)
```

#### Run search

```{r}
start <- Sys.time()
m_bayes_3 <- (
  foreach (
    i = 1:5, 
    .combine = c
  ) %dopar% {
    pmcmc(
      m_bayesapprox_3,
      Nmcmc=1000, #Nbayes_iter,  # 40000
      Np=100,
      proposal=mvn_rw_adaptive(
        bayes_sd_3, 
        scale.start = 100, 
        scale.cooling = 0.99, 
        # shape.start = 2000
        shape.start = 100
      )
    )
  }
)
end <- Sys.time()
as.integer(round(difftime(end, start, units='mins')))
```

```{r}
#| fig-width: 12
#| fig-asp: 1
plot(
  m_bayes_3,
  pars = c(
    "loglik",
    "log.prior",
    "a_cov",
    "b_cov",
    "e_cov",
    "f_ai",
    "eps_A",
    "mu_rs",
    "tau",
    "rho"
  )
)
```

# With Covariate Regression Model

```{r}
model_output_filename_4 <- file.path(output_dir, "uvira_multioutbreak_cov_reg.csv")
```

## Model Definition

### Fixed Parameters

```{r}
N_0 <- uvira_pop_2016
mu_latend <- 1 / ((5/7) / 52) # inverse of latent period (5 days transformed in weeks)
mu_ar <- 1 / ((10/7) / 52) # inverse of asymptomatic period (10 days transformed in weeks)
mu_ir <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)

fixed_params_4 <- c(
  N_0 = N_0,
  mu_latend = mu_latend,
  mu_ar = mu_ar,
  mu_ir = mu_ir
)
```

### Initialization Function

```{r}
rinit_4 <- Csnippet("
  double m = N_0/(s_0+e_0+a_0+i_0+r_0);
  S = nearbyint(s_0*m);
  E = nearbyint(e_0*m);
  A = nearbyint(a_0*m);
  I = nearbyint(i_0*m);
  R = nearbyint(r_0*m);
  N = S + E + A + I + R;
  C = 0;
  W = 0;
")
```

### Step Function

```{r}
rproc_4 <- Csnippet("
  //double foi, births;
  double foi, births, dw;
  double rate[11];
  double trans[11];

  // Poisson births
  births = rpois(birthrate * N * dt);

  // expected force of infection
  double cov = (
      a_cov
      + b_cov_1 * cov_1 
      + b_cov_2 * cov_2
      + b_cov_3 * cov_3
      + b_cov_4 * cov_4
      + b_cov_5 * cov_5
      + b_cov_6 * cov_6
      + b_cov_7 * cov_7
      + b_dis * dis
  );
  foi = ((I + eps_A * A)/N) * cov;
  
  // white noise (extrademographic stochasticity)
  dw = rgammawn(sigmaSE,dt);

  //rate[0] = foi;  // stochastic force of infection
  rate[0] = foi*dw/dt;  // stochastic force of infection
  rate[1] = deathrate;        // natural death rate
  rate[2] = mu_latend * f_ai;      // transition to asymp
  rate[3] = mu_latend * (1 - f_ai); // transition to symp
  rate[4] = deathrate;        // natural death rate
  rate[5] = mu_ar;       // asymp -> recovery
  rate[6] = deathrate;        // natural death rate
  rate[7] = mu_ir;       // symp -> recovered
  rate[8] = deathrate;        // natural death rate
  rate[9] = mu_rs;       // recovered -> susceptible
  rate[10] = deathrate;        // natural death rate

  // transitions between classes
  reulermultinom(2, S, &rate[0], dt, &trans[0]);
  reulermultinom(3, E, &rate[2], dt, &trans[2]);
  reulermultinom(2, A, &rate[5], dt, &trans[5]);
  reulermultinom(2, I, &rate[7], dt, &trans[7]);
  reulermultinom(2, R, &rate[9], dt, &trans[9]);

  S += births - trans[0] - trans[1] + trans[9];
  E += trans[0] - trans[2] - trans[3] - trans[4];
  A += trans[2] - trans[5] - trans[6];
  I += trans[3] - trans[7] - trans[8];
  R += trans[5] + trans[7] - trans[9] - trans[10];
  
  // Measured
  C += trans[3];
  
  // Noise
  W += (dw - dt)/sigmaSE; 

  N = S + E + A + I + R;
")
```

### Observation Function

```{r}
# dmeas_3 <- Csnippet("
#   double tol = 1.0e-25;
#   double mean_reports = rho*C;
#   double sd_reports = sqrt(pow(tau*C,2) + mean_reports);
#   if(reports > 0.0){
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0)
#       - pnorm(reports-0.5,mean_reports,sd_reports,1,0) + tol;
#   } else{
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0) + tol;
#   }
#   if (give_log) lik = log(lik);
# ")

dmeas_4 <- Csnippet("
  double f;
  if (tau > 0.0) {
    f = dnbinom_mu(nearbyint(reports), 1.0/tau, rho*C, give_log);
  }
  else {
    f = dpois(nearbyint(reports), rho*C, give_log);
  }
  lik = (give_log) ? f : exp(f);
")

# rmeas_3 <- Csnippet("
#   reports = rnorm(rho*C, sqrt(pow(tau*C,2) + rho*C));
#   if (reports > 0.0) {
#     reports = nearbyint(reports);
#   } else {
#     reports = 0.0;
#   }")

rmeas_4 <- Csnippet("
  if (tau > 0.0) {
    reports = rnbinom_mu(1.0/tau, rho*C);
  }
  else {
    reports = rpois(rho*C);
  }
")
```

## Initial parameter estimates

```{r}
# initial guesses
a_cov_guess <- 200
b_cov_1_guess <- 10
b_cov_2_guess <- 10
b_cov_3_guess <- 10
b_cov_4_guess <- 10
b_cov_5_guess <- 10
b_cov_6_guess <- 10
b_cov_7_guess <- 10
b_dis_guess <- 1
eps_A_guess <- 0.08
f_ai_guess <- 0.75
mu_rs_guess <- 1 / ((150/7) / 52) # inverse of immunity period (50 days transformed in weeks)
rho_guess <- 0.03
s_0_guess <- 0.55
i_0_guess <- 0.003 
a_0_guess <- 0.01 
e_0_guess <- 0.02
r_0_guess <- max(1 - s_0_guess - e_0_guess - a_0_guess - i_0_guess, 0)
tau_guess <- 0.1
sigmaSE_guess <- 0.01

init_params_4 <- c(
  fixed_params_4,
  sigmaSE = sigmaSE_guess,
  s_0 = s_0_guess,
  e_0 = e_0_guess,
  a_0 = a_0_guess,
  i_0 = i_0_guess,
  r_0 = r_0_guess,
  a_cov = a_cov_guess,
  b_cov_1 = b_cov_1_guess,
  b_cov_2 = b_cov_2_guess,
  b_cov_3 = b_cov_3_guess,
  b_cov_4 = b_cov_4_guess,
  b_cov_5 = b_cov_5_guess,
  b_cov_6 = b_cov_6_guess,
  b_cov_7 = b_cov_7_guess,
  b_dis = b_dis_guess,
  eps_A = eps_A_guess,
  f_ai = f_ai_guess,
  mu_rs = mu_rs_guess,
  tau = tau_guess,
  rho = rho_guess
)
```

## POMP object

```{r}
statenames_4 <- c(
  "S", 
  "E", 
  "A", 
  "I",
  "R", 
  "C",
  "W",
  "N"
)
obsnames_4 <- "reports"
covar_4 <- covariate_table(
  df_covar,
  times="date"
)
covarnames_4 <- c(
  "cov_1",
  "cov_2",
  "cov_3",
  "cov_4",
  "cov_5",
  "cov_6",
  "cov_7",
  "dis",
  "birthrate", 
  "deathrate"
)
# rp_names_no_trans <- c(
#   
# )
rp_names_log_4 <- c(
  "sigmaSE",
  "a_cov",
  "b_dis",
  "b_cov_1",
  "b_cov_2",
  "b_cov_3",
  "b_cov_4",
  "b_cov_5",
  "b_cov_6",
  "b_cov_7",
  "tau",
  "mu_rs"
)
rp_names_logit_4 <- c(
  "f_ai",
  "eps_A",
  "rho"
)
ivp_names_4 <- c(
  "s_0",
  "e_0",
  "a_0",
  "i_0",
  "r_0"
)
paramnames_4 <- c(
  # rp_names_no_trans, 
  rp_names_log_4, 
  rp_names_logit_4, 
  ivp_names_4, 
  names(fixed_params_4)
)
accumvars_4 <- c(
  "C",
  "W"
)
partrans_4 <- parameter_trans(
  log=rp_names_log_4,
  # logit=c(rp_names_logit_4, ivp_names_4)
  logit=rp_names_logit_4,
  barycentric=ivp_names_4
)

m_4 <- (
  df_model
  %>% select(date, reports)
  %>% pomp(
    times = "date",
    t0 = df_covar$date[1],
    rprocess = euler(
      step.fun = rproc_4,
      delta.t = 1/52/7
    ),
    rinit = rinit_4,
    rmeasure = rmeas_4,
    dmeasure = dmeas_4,
    obsnames = obsnames_4,
    covar = covar_4,
    covarnames = covarnames_4,
    accumvars = accumvars_4,
    statenames = statenames_4,
    paramnames = paramnames_4,
    partrans = partrans_4,
    params = init_params_4
  )
)
```

## Simulations

```{r}
sims_4 <- (
  m_4
  %>% simulate(
    nsim = 20,
    format = "data.frame",
    include.data = TRUE
  )
)
```

```{r}
pf_sim_4 <- pfilter(m_4, Np = 1000)
lk_sim_4 <- logLik(pf_sim_4)
lk_sim_4
```

```{r}
(
  sims_4
  %>% filter(.id == 1)
  %>% select(
    date, 
    S, 
    E, 
    A, 
    I, 
    C,
    R, 
    W,
    N
  )
  %>% pivot_longer(
    cols = -date,
    names_to = "compartment",
    values_to = "counts"
  )
  %>% ggplot(
    aes(x = date, y = counts, color = compartment)
  )
  + facet_wrap(~compartment, scales = "free_y")
  + geom_line()
  + guides(color = "none")
)
```

```{r}
#| fig-width: 4.5
#| fig-height: 3
(
  sims_4
  %>% mutate(
    date = as.Date("2016-01-01") + 7 * date
  )
  %>% ggplot(
    aes(x = date, y = reports, group=.id, color=.id=="data")
  )
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line()
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases",
    x = "Date",
    y = "Counts"
  )
)
```

## Local Search

```{r}
# Parameters 
rw.sd_rp <- 0.02
rw.sd_ivp <- 0.2
cooling.fraction.50 <- 0.5 # Level of parameter variance after 50% of iterations
rw.sd_4 <- rw_sd(
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  r_0 = ivp(rw.sd_ivp),
  sigmaSE = rw.sd_rp,
  a_cov = rw.sd_rp,
  b_cov_1 = rw.sd_rp,
  b_cov_2 = rw.sd_rp,
  b_cov_3 = rw.sd_rp,
  b_cov_4 = rw.sd_rp,
  b_cov_5 = rw.sd_rp,
  b_cov_6 = rw.sd_rp,
  b_cov_7 = rw.sd_rp,
  b_dis = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_ai = rw.sd_rp,
  mu_rs = rw.sd_rp,
  tau = rw.sd_rp,
  rho = rw.sd_rp
)
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_local_4 <- foreach (
  i=1:Nreps_local, 
  .combine=c 
) %dopar% {
  init_params_4[rp_names_log_4] <- rlnorm(
    n=length(rp_names_log_4), 
    meanlog=log(init_params_4[rp_names_log_4]),
    sdlog=1
  )
  init_params_4[c(rp_names_logit_4, ivp_names_4)] <- runif(
    n=length(c(rp_names_logit_4, ivp_names_4)),
    min=0.01,
    max=0.99
  )
  (
    mif2(
      m_4,
      Np=Np,
      Nmif=Nmif,
      params=init_params_4,
      cooling.fraction.50 = cooling.fraction.50,
      rw.sd=rw.sd_4
    )
  )
}
end <- Sys.time()
sprintf("Run time of local iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_local_all_4 <- foreach(
  mf = m_local_4,
  .combine=rbind
) %dopar% {
  pf <- replicate(
    n = Nreps_eval,
    logLik(pfilter(mf, Np = Np))
  )
  logmeanexp(pf, se = TRUE)
}
```

Focus on the highest estimated likelihood to get MLE

```{r}
m_local_mle_4 <- m_local_4[[which.max(loglik_local_all_4[,1])]]
params_local_4 <- coef(m_local_mle_4)
loglik_local_best_4 <- logmeanexp(
  replicate(
    n = Nreps_eval,
    logLik(pfilter(m_local_mle_4, Np = 1000))
  ),
  se = TRUE
)
```

```{r}
loglik_local_best_4
```

### Collect Results

```{r}
df_results_local_4 <- data.frame(
  t(sapply(m_local_4, coef)),
  log_lik=loglik_local_all_4[,1],
  log_lik_se=loglik_local_all_4[,2]
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_4)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_local_4, 
      file = model_output_filename_4, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostics

```{r}
model_params_4 <- read.table(
  model_output_filename_4,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_4$log_lik, digits = 5)
```

#### Pair plot

```{r}
(
  m_local_4
  %>% traces()
  %>% melt()
  %>% filter(!name %in% c(names(fixed_params_4), ivp_names_4))
  %>% ggplot(
    aes(
      x=iteration,
      y=value,
      group=.L1,
      color=factor(.L1)
    )
  )
  + geom_line()
  + guides(color="none")
  + facet_wrap(~name, scales="free_y")
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov_1
    +b_cov_2
    +b_cov_3
    +b_cov_4
    +b_cov_5
    +b_cov_6
    +b_cov_7
    +b_dis
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +sigmaSE
  ),
  data=subset(model_params_4, log_lik > max(log_lik) - 2000)
)
```

## Global Search

### Search box

```{r}
s_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
e_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
i_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
r_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_cov_guesses <- runif(Nreps_global, min = 0, max = 500)
b_cov_1_guesses <- runif(Nreps_global, min = 0, max = 200)
b_cov_2_guesses <- runif(Nreps_global, min = 0, max = 200)
b_cov_3_guesses <- runif(Nreps_global, min = 0, max = 200)
b_cov_4_guesses <- runif(Nreps_global, min = 0, max = 200)
b_cov_5_guesses <- runif(Nreps_global, min = 0, max = 200)
b_cov_6_guesses <- runif(Nreps_global, min = 0, max = 200)
b_cov_7_guesses <- runif(Nreps_global, min = 0, max = 200)
b_dis_guesses <- runif(Nreps_global, min = 0, max = 100)
eps_A_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
f_ai_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
mu_rs_guesses <- runif(Nreps_global, min = 1e-3, max = 50)
rho_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
tau_guesses <- runif(Nreps_global, min = 1e-4, max = 5)
sigmaSE_guesses <- runif(Nreps_global, min = 1e-4, max = 0.3)


global_guesses_4 <- as.data.frame(cbind(
  sigmaSE = sigmaSE_guesses,
  s_0 = s_0_guesses,
  e_0 = e_0_guesses,
  a_0 = a_0_guesses,
  i_0 = i_0_guesses,
  r_0 = r_0_guesses,
  a_cov = a_cov_guesses,
  b_cov_1 = b_cov_1_guesses,
  b_cov_2 = b_cov_2_guesses,
  b_cov_3 = b_cov_3_guesses,
  b_cov_4 = b_cov_4_guesses,
  b_cov_5 = b_cov_5_guesses,
  b_cov_6 = b_cov_6_guesses,
  b_cov_7 = b_cov_7_guesses,
  b_dis = b_dis_guesses,
  eps_A = eps_A_guesses,
  f_ai = f_ai_guesses,
  mu_rs = mu_rs_guesses,
  tau = tau_guesses,
  rho = rho_guesses
))
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_global_4 <- foreach (guess=iter(global_guesses_4, "row"), .combine=c) %dopar% {
  (
    m_local_mle_4
    %>% mif2(Nmif=Nmif, params=c(fixed_params_4, unlist(guess)))
    %>% mif2(Nmif=Nmif, cooling.fraction.50 = 0.1)
  )
}
end <- Sys.time()
sprintf("Run time of global iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_global_all_4 <- (
  foreach(
    i=1:Nreps_global,
    .combine=rbind
  ) %dopar% {
    logmeanexp(
      replicate(
        Nreps_eval,
        logLik(pfilter(m_4, params=coef(m_global_4[[i]]), Np=1000))
      ),
      se=TRUE
    )
  }
)
```

### Collect Results

```{r}
df_results_global_4 <- (
  data.frame(
    t(sapply(m_global_4, coef)),
    log_lik=loglik_global_all_4[,1],
    log_lik_se=loglik_global_all_4[,2]
  )
  %>% select(
    names(df_results_local_4)
  )
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_4)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_global_4, 
      file = model_output_filename_4, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostic

```{r}
model_params_4 <- read.table(
  model_output_filename_4,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_4$log_lik, digits=5)
```

#### Pair plot

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_4
  %>% filter(log_lik>max(log_lik) - 70)
  %>% bind_rows(global_guesses_4)
  %>% mutate(
    type = if_else(is.na(log_lik), "guess", "result")
  )
  %>% arrange(type)
)
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov_1
    +b_cov_2
    +b_cov_3
    +b_cov_4
    +b_cov_5
    +b_cov_6
    +b_cov_7
    +b_dis
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +sigmaSE
  ),
  data=res_to_plot,
  col=ifelse(res_to_plot$type == "guess", grey(0.5), "red")
)
```

#### Simulations from best model

```{r}
sims_global_best_ll_4 <- (
  m_global_4[[which(rank(-loglik_global_all_4[,1]) == 1)]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_ll_agg_4 <- (
  sims_global_best_ll_4
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)

sims_global_best_sd_4 <- (
  m_global_4[[which.min(loglik_global_all_4[,2])]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_sd_agg_4 <- (
  sims_global_best_sd_4
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 6
p1 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_ll_agg_4,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_ll_agg_4,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
p2 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_sd_agg_4,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_sd_agg_4,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best SD",
    x = "Date",
    y = "Counts"
  )
)
p1/p2
```

## Bayes Search

### Prior Functions

```{r}
rprior_4 <- Csnippet("
  s_0 = rbeta(1, 1);
  e_0 = rbeta(1, 1);
  a_0 = rbeta(1, 1);
  i_0 = rbeta(1, 1);
  r_0 = rbeta(1, 1);
  a_cov = rgamma(a_cov_0, a_cov_1);
  b_cov_1 = rgamma(b_cov_10, b_cov_11);
  b_cov_2 = rgamma(b_cov_20, b_cov_21);
  b_cov_3 = rgamma(b_cov_30, b_cov_31);
  b_cov_4 = rgamma(b_cov_40, b_cov_41);
  b_cov_5 = rgamma(b_cov_50, b_cov_51);
  b_cov_6 = rgamma(b_cov_60, b_cov_61);
  b_cov_7 = rgamma(b_cov_70, b_cov_71);
  f_ai = rbeta(f_ai_0, f_ai_1);
  eps_A = rbeta(eps_A_0, eps_A_1);
  mu_rs = rgamma(mu_rs_0, mu_rs_1);
  tau = rgamma(tau_0, tau_1);
  rho = rbeta(rho_0, rho_1);
  sigmaSE = rgamma(sigmaSE_0, sigmaSE_1);
")

dprior_4 <- Csnippet("
  lik = (
    dbeta(s_0, 1, 1, give_log)
    + dbeta(e_0, 1, 1, give_log)
    + dbeta(a_0, 1, 1, give_log)
    + dbeta(i_0, 1, 1, give_log)
    + dbeta(r_0, 1, 1, give_log)
    + dgamma(a_cov, a_cov_0, a_cov_1, give_log)
    + dgamma(b_cov_1, b_cov_10, b_cov_11, give_log)
    + dgamma(b_cov_2, b_cov_20, b_cov_21, give_log)
    + dgamma(b_cov_3, b_cov_30, b_cov_31, give_log)
    + dgamma(b_cov_4, b_cov_40, b_cov_41, give_log)
    + dgamma(b_cov_5, b_cov_50, b_cov_51, give_log)
    + dgamma(b_cov_6, b_cov_60, b_cov_61, give_log)
    + dgamma(b_cov_7, b_cov_70, b_cov_71, give_log)
    + dbeta(f_ai, f_ai_0, f_ai_1, give_log)
    + dbeta(eps_A, eps_A_0, eps_A_1, give_log)
    + dgamma(mu_rs, mu_rs_0, mu_rs_1, give_log)
    + dgamma(tau, tau_0, tau_1, give_log)
    + dbeta(rho, rho_0, rho_1, give_log)
    + dgamma(sigmaSE, sigmaSE_0, sigmaSE_1, give_log)
  );
  if (!give_log) lik = exp(lik);
")
```

### Prior params

```{r}
test_x <- seq(0, 1000, by=1)
test_y <- dgamma(test_x, shape=3, scale=30)
# test_y <- dexp(test_x, 1/100)
plot(test_x, test_y)
```

```{r}
test_x <- seq(0, 1, by=0.01)
test_y <- dbeta(test_x, 2, 6)
plot(test_x, test_y)
```

```{r}
prior_params_4 <- c(
  sigmaSE_0 = 0.1,
  sigmaSE_1 = 1,
  a_cov_0 = 3,
  a_cov_1 = 200,
  b_cov_10 = 3,
  b_cov_11 = 200,
  b_cov_20 = 3,
  b_cov_21 = 200,
  b_cov_30 = 3,
  b_cov_31 = 200,
  b_cov_40 = 3,
  b_cov_41 = 200,
  b_cov_50 = 3,
  b_cov_51 = 200,
  b_cov_60 = 3,
  b_cov_61 = 200,
  b_cov_70 = 3,
  b_cov_71 = 200,
  f_ai_0 = 2,
  f_ai_1 = 2,
  eps_A_0 = 2,
  eps_A_1 = 6,
  mu_rs_0 = 2,
  mu_rs_1 = 1,
  tau_0 = 2,
  tau_1 = 1,
  rho_0 = 2,
  rho_1 = 1
)
```

### Approximate modeling

```{r}
start <- Sys.time()
bayes_start_coefs_4 <- model_params_4[which.max(model_params_4$log_lik),]
m_bayes_4 <- (
  m_4
  %>% pomp(
    rprior = rprior_4,
    dprior = dprior_4,
    paramnames = c(paramnames_4, names(prior_params_4)),
    params = c(
      bayes_start_coefs_4,
      prior_params_4
    )
  )
)
m_bayesapprox_4 <- bsmc2(
  data = m_bayes_4,
  Np=20000
)
end <- Sys.time()
sprintf("Run time of bsmc: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
df_bayesapprox_4 <- (
  m_bayesapprox_4
  %>% as.data.frame()
  %>% select(c(all_of(paramnames_4), .id))
)
```

```{r}
#| fig-width: 8
#| fig-height: 8
(
  df_bayesapprox_4
  %>% group_by(.id)
  %>% slice_sample(n=1000)
  %>% ungroup()
  %>% mutate(
    .id = factor(.id, levels=c("prior", "posterior")), 
  )
  %>% arrange(.id)
  %>% ggpairs(
    aes(color=.id, alpha=.id, fill=.id),
    columns = names(global_guesses_4),
    upper = list(continuous = "points"),
    progress = FALSE,
  )
  + scale_color_manual(
    values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_fill_manual(values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_alpha_manual(values = c("posterior" = 0.5, "prior" = 0.2))
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    plot.background = element_blank(),
    strip.background = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8)
  )
)
```

#### Simulations from parameter posterior

```{r}
approx_post_samples_4 <- (
  df_bayesapprox_4
  %>% filter(.id == "posterior")
  %>% select(-.id)
  %>% sample_n(100)
)
```

```{r}
approx_post_sims_4 <- (
  foreach (
    sample=iter(approx_post_samples_4, "row"),
    .combine=rbind
  ) %dopar% {
    (
      m_4
      %>% simulate(
        nsim = 1,
        params = unlist(sample),
        format = "data.frame",
        include.data = FALSE
      )
    )
  }
)
```

```{r}
approx_post_sims_agg_4 <- (
  approx_post_sims_4
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 3
(
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = approx_post_sims_agg_4,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = approx_post_sims_agg_4,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + scale_y_continuous(limits = c(0, 120))
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
```

# With Covariate Modulation + IDPS

NEED TO ADD IMPACT OF DISASTER

```{r}
model_output_filename_5 <- file.path(output_dir, "uvira_multioutbreak_cov_idps.csv")
```

## Model Definition

### Fixed Parameters

```{r}
N_0 <- uvira_pop_2016
mu_latend <- 1 / ((5/7) / 52) # inverse of latent period (5 days transformed in weeks)
mu_ar <- 1 / ((10/7) / 52) # inverse of asymptomatic period (10 days transformed in weeks)
mu_ir <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)

fixed_params_5 <- c(
  N_0 = N_0,
  mu_latend = mu_latend,
  mu_ar = mu_ar,
  mu_ir = mu_ir
)
```

### Initialization Function

```{r}
rinit_5 <- Csnippet("
  double m = N_0/(s_0+e_0+a_0+i_0+r_0);
  S = nearbyint(s_0*m);
  E = nearbyint(e_0*m);
  A = nearbyint(a_0*m);
  I = nearbyint(i_0*m);
  R = nearbyint(r_0*m);
  N = S + E + A + I + R;
  C = 0;
  W = 0;
")
```

### Step Function

```{r}
rproc_5 <- Csnippet("
  //double foi, births;
  double foi, births, dw;
  double rate[11];
  double trans[11];
  double rate_idps[4];
  int trans_idps[4];
  
  // idps
  if (idps < 0) {
    if (N > I) {
      double idps_scaled = fmin(nearbyint(-idps * b_idps), (N-I-1));
      rate_idps[0] = S/(N-I);
      rate_idps[1] = E/(N-I);
      rate_idps[2] = A/(N-I);
      rate_idps[3] = 1 - rate_idps[0] - rate_idps[1] - rate_idps[2];
      rmultinom(idps_scaled, &rate_idps[0], 4, &trans_idps[0]);
      S += -fmin(trans_idps[0], S-1);
      E += -fmin(trans_idps[1], E-1);
      A += -fmin(trans_idps[2], A-1);
      R += -fmin(trans_idps[3], R-1);
    }
  } 
  else{
    double idps_scaled = idps * b_idps;
    double idps_in = nearbyint(idps_scaled / 4);
    trans_idps[0] = idps_in;
    trans_idps[1] = idps_in;
    trans_idps[2] = idps_in;
    trans_idps[3] = idps_in;
    S += trans_idps[0];
    E += trans_idps[1];
    A += trans_idps[2];
    R += trans_idps[3];
  }
  
  N = S + E + A + I + R;

  // Poisson births
  births = rpois(birthrate * N * dt);

  // expected force of infection
  foi = (a_cov + b_cov * cov + b_dis * dis)*(I + eps_A * A)/N;
  
  // white noise (extrademographic stochasticity)
  dw = rgammawn(sigmaSE,dt);

  //rate[0] = foi;  // stochastic force of infection
  rate[0] = foi*dw/dt;  // stochastic force of infection
  rate[1] = deathrate;        // natural death rate
  rate[2] = mu_latend * f_ai;      // transition to asymp
  rate[3] = mu_latend * (1 - f_ai); // transition to symp
  rate[4] = deathrate;        // natural death rate
  rate[5] = mu_ar;       // asymp -> recovery
  rate[6] = deathrate;        // natural death rate
  rate[7] = mu_ir;       // symp -> recovered
  rate[8] = deathrate;        // natural death rate
  rate[9] = mu_rs;       // recovered -> susceptible
  rate[10] = deathrate;        // natural death rate

  // transitions between classes
  reulermultinom(2, S, &rate[0], dt, &trans[0]);
  reulermultinom(3, E, &rate[2], dt, &trans[2]);
  reulermultinom(2, A, &rate[5], dt, &trans[5]);
  reulermultinom(2, I, &rate[7], dt, &trans[7]);
  reulermultinom(2, R, &rate[9], dt, &trans[9]);

  S += births - trans[0] - trans[1] + trans[9];
  E += trans[0] - trans[2] - trans[3] - trans[4];
  A += trans[2] - trans[5] - trans[6];
  I += trans[3] - trans[7] - trans[8];
  R += trans[5] + trans[7] - trans[9] - trans[10];
  
  // Measured
  C += trans[3];
  
  // Noise
  W += (dw - dt)/sigmaSE; 
  
  N = S + E + A + I + R;
")
```

### Observation Function

```{r}
dmeas_5 <- Csnippet("
  double f;
  double tol = 1e-10;
  if (tau > 0.0) {
    f = dnbinom_mu(nearbyint(reports), 1.0/tau, rho*C, give_log) + tol;
  }
  else {
    f = dpois(nearbyint(reports), rho*C, give_log) + tol;
  }
  lik = (give_log) ? f : exp(f);
")


rmeas_5 <- Csnippet("
  if (tau > 0.0) {
    reports = rnbinom_mu(1.0/tau, rho*C);
  }
  else {
    reports = rpois(rho*C);
  }
")
```

## Initial parameter estimates

```{r}
# initial guesses
s_0_guess <- 0.55
i_0_guess <- 0.005
a_0_guess <- 0.01
e_0_guess <- 0.02
r_0_guess <- max(1 - s_0_guess - e_0_guess - a_0_guess - i_0_guess, 0)
a_cov_guess <- 80
b_cov_guess <- 250
eps_A_guess <- 0.08
f_ai_guess <- 0.75
mu_rs_guess <- 1 / ((150/7) / 52) # inverse of immunity period (50 days transformed in weeks)
tau_guess <- 0.01
rho_guess <- 0.03
b_idps_guess <- 0.03
b_dis_guess <- 20
sigmaSE_guess <- 0.05

init_params_5 <- c(
  fixed_params_5,
  sigmaSE = sigmaSE_guess,
  s_0 = s_0_guess,
  e_0 = e_0_guess,
  a_0 = a_0_guess,
  i_0 = i_0_guess,
  r_0 = r_0_guess,
  a_cov = a_cov_guess,
  b_cov = b_cov_guess,
  b_dis = b_dis_guess,
  eps_A = eps_A_guess,
  f_ai = f_ai_guess,
  mu_rs = mu_rs_guess,
  tau = tau_guess,
  rho = rho_guess,
  b_idps = b_idps_guess
)
```

## POMP object

```{r}
statenames_5 <- c(
  "S", 
  "E", 
  "A", 
  "I",
  "R", 
  "C",
  "W",
  "N"
)
obsnames_5 <- "reports"
covar_5 <- covariate_table(
  df_covar %>% select(c(date, cov, birthrate, deathrate, idps, dis)),
  times="date"
)
covarnames_5 <- c(
  "cov",
  "dis",
  "birthrate", 
  "deathrate",
  "idps"
)
rp_names_log_5 <- c(
  "sigmaSE",
  "a_cov",
  "b_cov",
  "b_dis",
  "tau",
  "mu_rs"
)
rp_names_logit_5 <- c(
  "f_ai",
  "eps_A",
  "rho",
  "b_idps"
)
ivp_names_5 <- c(
  "s_0",
  "e_0",
  "a_0",
  "i_0",
  "r_0"
)
paramnames_5 <- c(rp_names_log_5, rp_names_logit_5, ivp_names_5, names(fixed_params_5))
accumvars_5 <- c(
  "C",
  "W"
)
partrans_5 <- parameter_trans(
  log=rp_names_log_5,
  logit=rp_names_logit_5,
  barycentric=ivp_names_5
)

m_5 <- (
  df_model
  %>% select(date, reports)
  %>% pomp(
    times = "date",
    t0 = df_covar$date[1],
    rprocess = euler(
      step.fun = rproc_5,
      delta.t = 1/52/7
    ),
    rinit = rinit_5,
    rmeasure = rmeas_5,
    dmeasure = dmeas_5,
    obsnames = obsnames_5,
    covar = covar_5,
    covarnames = covarnames_5,
    accumvars = accumvars_5,
    statenames = statenames_5,
    paramnames = paramnames_5,
    partrans = partrans_5,
    params = init_params_5
  )
)
```

## Simulations

```{r}
sims_5 <- (
  m_5
  %>% simulate(
    nsim = 20,
    format = "data.frame",
    include.data = TRUE
  )
)
```

```{r}
pf_sim_5 <- pfilter(m_5, Np = 1000)
lk_sim_5 <- logLik(pf_sim_5)
lk_sim_5
```

```{r}
(
  sims_5
  %>% filter(.id == 1)
  %>% select(
    date, 
    S, 
    E, 
    A, 
    I, 
    C, 
    R, 
    W,
    N
  )
  %>% pivot_longer(
    cols = -date,
    names_to = "compartment",
    values_to = "counts"
  )
  %>% ggplot(
    aes(x = date, y = counts, color = compartment)
  )
  + facet_wrap(~compartment, scales = "free_y")
  + geom_line()
  + guides(color = "none")
)
```

```{r}
(
  sims_5
  %>% filter(.id == 1)
  %>% select(date, N)
  %>% slice(which.min(abs(date - 4)))
  # %>% tail(1)
  # %>% ggplot()
  # + geom_line(aes(x = date, y = N))
)
```

```{r}
#| fig-width: 4.5
#| fig-height: 3
(
  sims_5
  %>% mutate(
    date = as.Date("2016-01-01") + 7 * date
  )
  %>% ggplot(
    aes(x = date, y = reports, group=.id, color=.id=="data")
  )
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line()
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases",
    x = "Date",
    y = "Counts"
  )
)
```

## Local Search

```{r}
# Parameters 
rw.sd_rp <- 0.02
rw.sd_ivp <- 0.2
cooling.fraction.50 <- 0.5 # Level of parameter variance after 50% of iterations
rw.sd_5 <- rw_sd(
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  r_0 = ivp(rw.sd_ivp),
  sigmaSE = rw.sd_rp,
  a_cov = rw.sd_rp,
  b_cov = rw.sd_rp,
  b_dis = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_ai = rw.sd_rp,
  mu_rs = rw.sd_rp,
  tau = rw.sd_rp,
  rho = rw.sd_rp,
  b_idps = rw.sd_rp
)
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_local_5 <- foreach (
  i=1:Nreps_local, 
  .combine=c 
) %dopar% {
  init_params_5[rp_names_log_5] <- rlnorm(
    n=length(rp_names_log_5), 
    meanlog=log(init_params_5[rp_names_log_5]),
    sdlog=1
  )
  init_params_5[c(rp_names_logit_5, ivp_names_5)] <- runif(
    n=length(c(rp_names_logit_5, ivp_names_5)),
    min=0.01,
    max=0.99
  )
  (
    mif2(
      m_5,
      Np=Np,
      Nmif=Nmif,
      params=init_params_5,
      cooling.fraction.50 = cooling.fraction.50,
      rw.sd=rw.sd_5
    )
  )
}
end <- Sys.time()
sprintf("Run time of local iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_local_all_5 <- foreach(
  mf = m_local_5,
  .combine=rbind
) %dopar% {
  pf <- replicate(
    n = Nreps_eval,
    logLik(pfilter(mf, Np = Np))
  )
  logmeanexp(pf, se = TRUE)
}
```

Focus on the highest estimated likelihood to get MLE

```{r}
m_local_mle_5 <- m_local_5[[which.max(loglik_local_all_5[,1])]]
params_local_5 <- coef(m_local_mle_5)
loglik_local_best_5 <- logmeanexp(
  replicate(
    n = Nreps_eval,
    logLik(pfilter(m_local_mle_5, Np = 1000))
  ),
  se = TRUE
)
```

```{r}
loglik_local_best_5
```

### Collect Results

```{r}
df_results_local_5 <- data.frame(
  t(sapply(m_local_5, coef)),
  log_lik=loglik_local_all_5[,1],
  log_lik_se=loglik_local_all_5[,2]
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_5)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_local_5, 
      file = model_output_filename_5, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostics

```{r}
model_params_5 <- read.table(
  model_output_filename_5,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_5$log_lik, digits = 5)
```

#### Pair plot

```{r}
(
  m_local_5
  %>% traces()
  %>% melt()
  %>% filter(!name %in% c(names(fixed_params_5), ivp_names_5))
  %>% ggplot(
    aes(
      x=iteration,
      y=value,
      group=.L1,
      color=factor(.L1)
    )
  )
  + geom_line()
  + guides(color="none")
  + facet_wrap(~name, scales="free_y")
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +b_idps
    +sigmaSE
  ),
  data=subset(model_params_5, log_lik > max(log_lik) - 100)
)
```

## Global Search

### Search box

```{r}
s_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
e_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
i_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
r_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_cov_guesses <- runif(Nreps_global, min = 0, max = 100)
b_cov_guesses <- runif(Nreps_global, min = 2, max = 200)
b_dis_guesses <- runif(Nreps_global, min = 0, max = 50)
eps_A_guesses <- runif(Nreps_global, min = 0.01, max = 0.5)
f_ai_guesses <- runif(Nreps_global, min = 0.1, max = 0.99)
mu_rs_guesses <- runif(Nreps_global, min = 1e-3, max = 50)
rho_guesses <- runif(Nreps_global, min = 0.01, max = 1)
tau_guesses <- runif(Nreps_global, min = 1e-4, max = 5)
b_idps_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
sigmaSE_guesses <- runif(Nreps_global, min = 0.01, max = 0.2)


global_guesses_5 <- as.data.frame(cbind(
  s_0 = s_0_guesses,
  e_0 = e_0_guesses,
  a_0 = a_0_guesses,
  i_0 = i_0_guesses,
  r_0 = r_0_guesses,
  sigmaSE = sigmaSE_guesses,
  a_cov = a_cov_guesses,
  b_cov = b_cov_guesses,
  b_dis = b_dis_guesses,
  eps_A = eps_A_guesses,
  f_ai = f_ai_guesses,
  mu_rs = mu_rs_guesses,
  tau = tau_guesses,
  rho = rho_guesses,
  b_idps = b_idps_guesses
))
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_global_5 <- foreach (guess=iter(global_guesses_5, "row"), .combine=c) %dopar% {
  (
    m_local_mle_5
    %>% mif2(Nmif=Nmif, params=c(fixed_params_5, unlist(guess)))
    %>% mif2(Nmif=Nmif, cooling.fraction.50 = 0.1)
  )
}
end <- Sys.time()
sprintf("Run time of global iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_global_all_5 <- (
  foreach(
    i=1:Nreps_global,
    .combine=rbind
  ) %dopar% {
    logmeanexp(
      replicate(
        Nreps_eval,
        logLik(pfilter(m_5, params=coef(m_global_5[[i]]), Np=1000))
      ),
      se=TRUE
    )
  }
)
```

### Collect Results

```{r}
df_results_global_5 <- (
  data.frame(
    t(sapply(m_global_5, coef)),
    log_lik=loglik_global_all_5[,1],
    log_lik_se=loglik_global_all_5[,2]
  )
  %>% select(
    names(df_results_local_5)
  )
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_5)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_global_5, 
      file = model_output_filename_5, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostic

```{r}
model_params_5 <- read.table(
  model_output_filename_5,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_5$log_lik, digits=5)
```

#### Pair plot

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_5
  %>% filter(!is.na(log_lik))
  %>% filter((log_lik>max(log_lik) - 100))
  %>% bind_rows(global_guesses_5)
  %>% mutate(
    type = if_else(is.na(log_lik), "guess", "result")
  )
  %>% arrange(type)
)
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +b_idps
    +sigmaSE
  ),
  data=res_to_plot,
  col=ifelse(res_to_plot$type == "guess", grey(0.5), "red")
)
```

#### Simulations from best model

```{r}
sims_global_best_ll_5 <- (
  m_global_5[[which(rank(-loglik_global_all_5[,1]) == 1)]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_ll_agg_5 <- (
  sims_global_best_ll_5
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)

sims_global_best_sd_5 <- (
  m_global_5[[which.min(loglik_global_all_5[,2])]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_sd_agg_5 <- (
  sims_global_best_sd_5
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 6
p1 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_ll_agg_5,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_ll_agg_5,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
p2 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_sd_agg_5,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_sd_agg_5,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best SD",
    x = "Date",
    y = "Counts"
  )
)
p1/p2
```

## Bayes Search

### Prior Functions

```{r}
rprior_5 <- Csnippet("
  s_0 = rbeta(1, 1);
  e_0 = rbeta(1, 1);
  a_0 = rbeta(1, 1);
  i_0 = rbeta(1, 1);
  r_0 = rbeta(1, 1);
  a_cov = rgamma(a_cov_0, a_cov_1);
  b_cov = rgamma(b_cov_0, b_cov_1);
  b_dis = rgamma(b_dis_0, b_dis_1);
  f_ai = rbeta(f_ai_0, f_ai_1);
  eps_A = rbeta(eps_A_0, eps_A_1);
  mu_rs = rgamma(mu_rs_0, mu_rs_1);
  tau = rgamma(tau_0, tau_1);
  rho = rbeta(rho_0, rho_1);
  b_idps = rbeta(b_idps_0, b_idps_1);
  sigmaSE = rgamma(sigmaSE_0, sigmaSE_1);
")

dprior_5 <- Csnippet("
  lik = (
    dbeta(s_0, 1, 1, give_log)
    + dbeta(e_0, 1, 1, give_log)
    + dbeta(a_0, 1, 1, give_log)
    + dbeta(i_0, 1, 1, give_log)
    + dbeta(r_0, 1, 1, give_log)
    + dgamma(a_cov, a_cov_0, a_cov_1, give_log)
    + dgamma(b_cov, b_cov_0, b_cov_1, give_log)
    + dgamma(b_dis, b_dis_0, b_dis_1, give_log)
    + dbeta(f_ai, f_ai_0, f_ai_1, give_log)
    + dbeta(eps_A, eps_A_0, eps_A_1, give_log)
    + dgamma(mu_rs, mu_rs_0, mu_rs_1, give_log)
    + dgamma(tau, tau_0, tau_1, give_log)
    + dbeta(rho, rho_0, rho_1, give_log)
    + dbeta(b_idps, b_idps_0, b_idps_1, give_log)
    + dgamma(sigmaSE, sigmaSE_0, sigmaSE_1, give_log)
  );
  if (!give_log) lik = exp(lik);
")
```

### Prior params

```{r}
test_x <- seq(0, 10, by=0.1)
test_y <- dgamma(test_x, shape=4, scale=2)
# test_y <- dexp(test_x, 1/100)
plot(test_x, test_y)
```

```{r}
test_x <- seq(0, 1, by=0.01)
test_y <- dbeta(test_x, 1, 6)
plot(test_x, test_y)
```

```{r}
prior_params_5 <- c(
  sigmaSE_0 = 0.1,
  sigmaSE_1 = 1,
  a_cov_0 = 20,
  a_cov_1 = 10,
  b_cov_0 = 20,
  b_cov_1 = 10,
  b_dis_0 = 2,
  b_dis_1 = 10,
  f_ai_0 = 6,
  f_ai_1 = 2,
  eps_A_0 = 2,
  eps_A_1 = 6,
  mu_rs_0 = 4,
  mu_rs_1 = 2,
  tau_0 = 2,
  tau_1 = 1,
  rho_0 = 1,
  rho_1 = 6,
  b_idps_0 = 2,
  b_idps_1 = 6
)
```

### Approximate modeling

```{r}
start <- Sys.time()
bayes_start_model_5 <- m_global_5[[which.min(loglik_global_all_5[,2])]]
m_bayesapprox_5 <- bsmc2(
  data = (
    bayes_start_model_5
    %>% pomp(
      rprior = rprior_5,
      dprior = dprior_5,
      paramnames = c(paramnames_5, names(prior_params_5)),
      params = c(
        coef(bayes_start_model_5),
        prior_params_5
      )
    )
  ),
  Np=20000
)
end <- Sys.time()
sprintf("Run time of bsmc: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
df_bayesapprox_5 <- (
  m_bayesapprox_5
  %>% as.data.frame()
  %>% select(c(all_of(paramnames_5), .id))
)
```

```{r}
#| fig-width: 10
#| fig-height: 10
(
  df_bayesapprox_5
  %>% group_by(.id)
  %>% slice_sample(n=1000)
  %>% ungroup()
  %>% mutate(
    .id = factor(.id, levels=c("prior", "posterior")), 
  )
  %>% arrange(.id)
  %>% ggpairs(
    aes(color=.id, alpha=.id, fill=.id),
    columns = names(global_guesses_5),
    upper = list(continuous = "points"),
    progress = FALSE,
  )
  + scale_color_manual(
    values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_fill_manual(values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_alpha_manual(values = c("posterior" = 0.5, "prior" = 0.2))
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    plot.background = element_blank(),
    strip.background = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8)
  )
)
```

#### Simulations from parameter posterior

```{r}
approx_post_samples_5 <- (
  df_bayesapprox_5
  %>% filter(.id == "posterior")
  %>% select(-.id)
  %>% sample_n(100)
)
```

```{r}
approx_post_sims_5 <- (
  foreach (
    sample=iter(approx_post_samples_5, "row"),
    .combine=rbind
  ) %dopar% {
    (
      m_5
      %>% simulate(
        nsim = 1,
        params = unlist(sample),
        format = "data.frame",
        include.data = FALSE
      )
    )
  }
)
```

```{r}
approx_post_sims_agg_5 <- (
  approx_post_sims_5
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 3
(
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = approx_post_sims_agg_5,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = approx_post_sims_agg_5,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + scale_y_continuous(limits = c(0, 120))
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
```

# With Covariate Modulation + IDPS + Hospitalized

```{r}
model_output_filename_6 <- file.path(output_dir, "uvira_multioutbreak_cov_idps_hosp.csv")
```

## Model Definition

### Fixed Parameters

```{r}
N_0 <- uvira_pop_2016
mu_latend <- 1 / ((5/7) / 52) # inverse of latent period (5 days transformed in weeks)
mu_ar <- 1 / ((10/7) / 52) # inverse of asymptomatic period (10 days transformed in weeks)
mu_ir <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)
mu_hr <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)

fixed_params_6 <- c(
  N_0 = N_0,
  mu_latend = mu_latend,
  mu_ar = mu_ar,
  mu_ir = mu_ir,
  mu_hr = mu_hr
)
```

### Initialization Function

```{r}
rinit_6 <- Csnippet("
  double m = N_0/(s_0+e_0+a_0+i_0+h_0+r_0);
  S = nearbyint(s_0*m);
  E = nearbyint(e_0*m);
  A = nearbyint(a_0*m);
  I = nearbyint(i_0*m);
  H = nearbyint(h_0*m);
  R = nearbyint(r_0*m);
  N = S + E + A + I + H + R;
  C = 0;
  //W = 0;
")
```

### Step Function

```{r}
rproc_6 <- Csnippet("
  double foi, births, hosp;
  //double foi, births, dw;
  double rate[14];
  double trans[14];
  double rate_idps[5];
  int trans_idps[5];

  // idps
  if (idps < 0) {
    if (N > H) {
      double idps_scaled = nearbyint(-idps * b_idps * (N-H-1));
      rate_idps[0] = S/(N-H);
      rate_idps[1] = E/(N-H);
      rate_idps[2] = A/(N-H);
      rate_idps[3] = I/(N-H);
      rate_idps[4] = 1 - rate_idps[0] - rate_idps[1] - rate_idps[2] - rate_idps[3];
      rmultinom(idps_scaled, &rate_idps[0], 5, &trans_idps[0]);
      S -= trans_idps[0];
      E -= trans_idps[1];
      A -= trans_idps[2];
      I -= trans_idps[3];
      R -= trans_idps[4];
    }
  } 
  else{
    double idps_scaled = idps * b_idps * (N-H-1);
    double idps_in = nearbyint(idps_scaled / 5);
    trans_idps[0] = idps_in;
    trans_idps[1] = idps_in;
    trans_idps[2] = idps_in;
    trans_idps[3] = idps_in;
    trans_idps[4] = idps_in;
    S += trans_idps[0];
    E += trans_idps[1];
    A += trans_idps[2];
    I += trans_idps[3];
    R += trans_idps[4];
  }
  
  N = S + E + A + I + H + R;

  // Poisson births
  births = rpois(birthrate * N * dt);

  // expected force of infection
  foi = (a_cov + b_cov * cov + b_dis * dis)*(I + eps_A * A)/N;
  
  // hospitalization rate
  hosp = f_h; // * (1/(1 + H/N));
  
  // white noise (extrademographic stochasticity)
  //dw = rgammawn(sigmaSE,dt);

  //rate[0] = foi*dw/dt;  // stochastic force of infection
  rate[0] = foi;  // stochastic force of infection
  rate[1] = deathrate;        // natural death rate
  rate[2] = mu_latend * f_ai;      // transition to asymp
  rate[3] = mu_latend * (1 - f_ai) * (1 - hosp); // transition to symp
  rate[4] = mu_latend * (1 - f_ai) * hosp; // transition to hospitalized
  rate[5] = deathrate;        // natural death rate
  rate[6] = mu_ar;       // asymp -> recovery
  rate[7] = deathrate;        // natural death rate
  rate[8] = mu_ir;       // symp -> recovered
  rate[9] = deathrate;        // natural death rate
  rate[10] = mu_hr;       // hospitalized -> recovered
  rate[11] = deathrate;        // natural death rate
  rate[12] = mu_rs;       // recovered -> susceptible
  rate[13] = deathrate;        // natural death rate

  // transitions between classes
  reulermultinom(2, S, &rate[0], dt, &trans[0]);
  reulermultinom(4, E, &rate[2], dt, &trans[2]);
  reulermultinom(2, A, &rate[6], dt, &trans[6]);
  reulermultinom(2, I, &rate[8], dt, &trans[8]);
  reulermultinom(2, H, &rate[10], dt, &trans[10]);
  reulermultinom(2, R, &rate[12], dt, &trans[12]);

  S += births - trans[0] - trans[1] + trans[12];
  E += trans[0] - trans[2] - trans[3] - trans[4] - trans[5];
  A += trans[2] - trans[6] - trans[7];
  I += trans[3] - trans[8] - trans[9];
  H += trans[4] - trans[10] - trans[11];
  R += trans[6] + trans[8] + trans[10] - trans[12] - trans[13];
  
  // Measured
  C += trans[4];
  
  // Noise
  //W += (dw - dt)/sigmaSE;  
  
  N = S + E + A + I + H + R;
")
```

### Observation Function

```{r}
dmeas_6 <- Csnippet("
  double f;
  double tol = 1.0e-25;
  if (tau > 0.0) {
    f = dnbinom_mu(nearbyint(reports), 1.0/tau, rho*C, give_log) + tol;
  }
  else {
    f = dpois(nearbyint(reports), rho*C, give_log) + tol;
  }
  lik = (give_log) ? f : exp(f);
")

# ZERO INFLATED
# dmeas_6 <- Csnippet("
#   double f;
#   double tol = 1.0e-25;
#   if (tau > 0.0) {
#     if (reports == 0) {
#       f = log(theta + exp(log(1 - theta) + dnbinom_mu(0, 1.0/tau, rho*C, 1)));
#     } else {
#       f = log(1 - theta) + dnbinom_mu(nearbyint(reports), 1.0/tau, rho*C, 1);
#     }
#   }
#   else {
#     if (reports == 0) {
#       f = log(theta + exp(log(1 - theta) + dpois(0, rho*C, 1)));
#     } else {
#       f = log(1 - theta) + dpois(nearbyint(reports), rho*C, 1);
#     }
#   }
#   lik = (give_log) ? f : exp(f);
# ")


# dmeas_6 <- Csnippet("
#   double tol = 1.0e-25;
#   double mean_reports = rho*C;
#   double sd_reports = sqrt(pow(tau*C,2) + mean_reports);
#   if(reports > 0.0){
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0)
#       - pnorm(reports-0.5,mean_reports,sd_reports,1,0) + tol;
#   } else{
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0) + tol;
#   }
#   if (give_log) lik = log(lik);
# ")

# rmeas_6 <- Csnippet("
#   if (tau > 0.0) {
#     reports = rnbinom_mu(1.0/tau, rho*C);
#   }
#   else {
#     reports = rpois(rho*C);
#   }
# ")

# ZERO INFLATED
# rmeas_6 <- Csnippet("
#   if (tau > 0.0) {
#     if (rho*C < 5) {
#       if (rbinom(1, theta) == 0) {
#         reports = rnbinom_mu(1.0/tau, rho*C);
#       } else {
#         reports = 0;
#       }
#     } else {
#       reports = rnbinom_mu(1.0/tau, rho*C);
#     }
#   }
#   else {
#     if (rho*C < 5) {
#       if (rbinom(1, theta) == 0) {
#         reports = rpois(rho*C);
#       } else {
#         reports = 0;
#       }
#     } else {
#       reports = rpois(rho*C);
#     }
#   }
# ")

rmeas_6 <- Csnippet("
  reports = rnorm(rho*C, sqrt( pow(tau*C,2) + rho*C ) );
  if (reports > 0.0) {
    reports = nearbyint(reports);
  } else {
    reports = 0.0;
 }")

```

## Initial parameter estimates

```{r}
a_cov_guess <- 70
b_cov_guess <- 250
eps_A_guess <- 0.08
f_ai_guess <- 0.55
f_h_guess <- 0.25
mu_rs_guess <- 1 / ((150/7) / 52) # inverse of immunity period (50 days transformed in weeks)
rho_guess <- 0.9
s_0_guess <- 0.55
h_0_guess <- df_reports$reports[1] / N_0
i_0_guess <- 0.005 #min(floor(H_0_guess / (1 - exp(-mu_ih_guess))), N_0)
a_0_guess <- 0.01 #min(floor(f_ai_guess/(1 - f_ai_guess) * I_0_guess), N_0)
e_0_guess <- 0.02 #min(floor((A_0_guess + I_0_guess) / (1 - exp(-mu_latend_guess))), N_0)
r_0_guess <- max(1 - s_0_guess - e_0_guess - a_0_guess - i_0_guess - h_0_guess, 0)
tau_guess <- 0.002
b_idps_guess <- 0.05
b_dis_guess <- 10
sigmaSE_guess <- 0.05
# theta_guess <- 0.1

init_params_6 <- c(
  fixed_params_6,
  sigmaSE = sigmaSE_guess,
  # theta = theta_guess,
  s_0 = s_0_guess,
  e_0 = e_0_guess,
  a_0 = a_0_guess,
  i_0 = i_0_guess,
  h_0 = h_0_guess,
  r_0 = r_0_guess,
  a_cov = a_cov_guess,
  b_cov = b_cov_guess,
  eps_A = eps_A_guess,
  f_ai = f_ai_guess,
  f_h = f_h_guess,
  mu_rs = mu_rs_guess,
  rho = rho_guess,
  tau = tau_guess,
  b_dis = b_dis_guess,
  b_idps = b_idps_guess
)
```

## POMP object

```{r}
statenames_6 <- c(
  "S", 
  "E", 
  "A", 
  "I", 
  "H",
  "R", 
  "C",
  "W",
  "N"
)
obsnames_6 <- "reports"
covar_6 <- covariate_table(
  df_covar %>% select(c(date, cov, idps, dis, birthrate, deathrate)),
  times="date"
)
covarnames_6 <- c(
  "cov", 
  "idps", 
  "dis",
  "birthrate", 
  "deathrate"
)
rp_names_log_6 <- c(
  "sigmaSE",
  "a_cov",
  "b_cov",
  "b_dis",
  "mu_rs",
  "tau"
)
rp_names_logit_6 <- c(
  # "theta",
  "f_ai",
  "eps_A",
  "f_h",
  "rho",
  "b_idps"
)
ivp_names_6 <- c(
  "s_0",
  "e_0",
  "a_0",
  "i_0",
  "h_0",
  "r_0"
)

paramnames_6 <- c(rp_names_log_6, rp_names_logit_6, ivp_names_6, names(fixed_params_6))
accumvars_6 <- c(
  "C",
  "W"
)
partrans_6 <- parameter_trans(
  log=rp_names_log_6,
  logit=rp_names_logit_6,
  barycentric=ivp_names_6
)

m_6 <- (
  df_model
  %>% select(date, reports)
  %>% pomp(
    times = "date",
    t0 = df_covar$date[1],
    rprocess = euler(
      step.fun = rproc_6,
      delta.t = 1/52/7
    ),
    rinit = rinit_6,
    rmeasure = rmeas_6,
    dmeasure = dmeas_6,
    obsnames = obsnames_6,
    covar = covar_6,
    covarnames = covarnames_6,
    accumvars = accumvars_6,
    statenames = statenames_6,
    paramnames = paramnames_6,
    partrans = partrans_6,
    params = init_params_6
  )
)
```

## Simulations

```{r}
sims_6 <- (
  m_6
  %>% simulate(
    nsim = 20,
    format = "data.frame",
    include.data = TRUE
  )
)
```

```{r}
pf_sim_6 <- pfilter(m_6, Np = 1000)
lk_sim_6 <- logLik(pf_sim_6)
lk_sim_6
```

```{r}
(
  sims_6
  %>% filter(.id == 1)
  %>% select(
    date, 
    S, 
    E, 
    A, 
    I, 
    H, 
    C,
    R, 
    # W,
    N
  )
  %>% pivot_longer(
    cols = -date,
    names_to = "compartment",
    values_to = "counts"
  )
  %>% ggplot(
    aes(x = date, y = counts, color = compartment)
  )
  + facet_wrap(~compartment, scales = "free_y")
  + geom_line()
  + guides(color = "none")
)
```

```{r}
#| fig-width: 4.5
#| fig-height: 3
(
  sims_6
  %>% mutate(
    date = as.Date("2016-01-01") + 7 * date
  )
  %>% ggplot(
    aes(x = date, y = reports, group=.id, color=.id=="data")
  )
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line()
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases",
    x = "Date",
    y = "Counts"
  )
)
ggsave(filename = "test_pomp_simulation.png", path = img_dir)
```

## Local Search

```{r}
# Parameters 
rw.sd_rp <- 0.02
rw.sd_ivp <- 0.2
cooling.fraction.50 <- 0.5 # Level of parameter variance after 50% of iterations
rw.sd_6 <- rw_sd(
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  h_0 = ivp(rw.sd_ivp),
  r_0 = ivp(rw.sd_ivp),
  # theta = rw.sd_rp,
  sigmaSE = rw.sd_rp,
  a_cov = rw.sd_rp,
  b_cov = rw.sd_rp,
  b_dis = rw.sd_rp,
  f_ai = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_h = rw.sd_rp,
  mu_rs = rw.sd_rp,
  rho = rw.sd_rp,
  b_idps = rw.sd_rp,
  tau = rw.sd_rp
)
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_local_6 <- foreach (
  i=1:Nreps_local, 
  .combine=c 
) %dopar% {
  init_params_6[rp_names_log_6] <- rlnorm(
    n=length(rp_names_log_6), 
    meanlog=log(init_params_6[rp_names_log_6]),
    sdlog=1
  )
  init_params_6[c(rp_names_logit_6, ivp_names_6)] <- runif(
    n=length(c(rp_names_logit_6, ivp_names_6)),
    min=0.01,
    max=0.99
  )
  (
    mif2(
      m_6,
      Np=Np,
      Nmif=Nmif,
      params=init_params_6,
      cooling.fraction.50 = cooling.fraction.50,
      rw.sd=rw.sd_6
    )
  )
}
end <- Sys.time()
sprintf("Run time of local iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_local_all_6 <- foreach(
  mf = m_local_6,
  .combine=rbind
) %dopar% {
  pf <- replicate(
    n = Nreps_eval,
    logLik(pfilter(mf, Np = Np))
  )
  logmeanexp(pf, se = TRUE)
}
```

Focus on the highest estimated likelihood to get MLE

```{r}
m_local_mle_6 <- m_local_6[[which.max(loglik_local_all_6[,1])]]
params_local_6 <- coef(m_local_mle_6)
loglik_local_best_6 <- logmeanexp(
  replicate(
    n = Nreps_eval,
    logLik(pfilter(m_local_mle_6, Np = 1000))
  ),
  se = TRUE
)
```

```{r}
loglik_local_best_6
```

### Collect Results

```{r}
df_results_local_6 <- data.frame(
  t(sapply(m_local_6, coef)),
  log_lik=loglik_local_all_6[,1],
  log_lik_se=loglik_local_all_6[,2]
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_6)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_local_6, 
      file = model_output_filename_6, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostics

```{r}
model_params_6 <- read.table(
  model_output_filename_6,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_6$log_lik, digits = 5)
```

#### Pair plot

```{r}
(
  m_local_6
  %>% traces()
  %>% melt()
  %>% filter(!name %in% c(names(fixed_params_6), ivp_names_6))
  %>% ggplot(
    aes(
      x=iteration,
      y=value,
      group=.L1,
      color=factor(.L1)
    )
  )
  + geom_line()
  + guides(color="none")
  + facet_wrap(~name, scales="free_y")
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
data_to_plot <- (
  model_params_6
  %>% filter(!is.na(log_lik))
  %>% filter(log_lik > max(log_lik) - 100)
)

pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +b_idps
    # +sigmaSE
    +theta
  ),
  data=data_to_plot
)
```

## Global Search

### Search box

```{r}
s_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
e_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
i_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
h_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
r_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_cov_guesses <- runif(Nreps_global, min = 0, max = 100)
b_cov_guesses <- runif(Nreps_global, min = 2, max = 200)
b_dis_guesses <- runif(Nreps_global, min = 0, max = 50)
eps_A_guesses <- runif(Nreps_global, min = 0.01, max = 0.5)
f_ai_guesses <- runif(Nreps_global, min = 0.1, max = 0.99)
f_h_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
mu_rs_guesses <- runif(Nreps_global, min = 1e-3, max = 50)
rho_guesses <- runif(Nreps_global, min = 0.01, max = 1)
tau_guesses <- runif(Nreps_global, min = 1e-4, max = 5)
b_idps_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
# sigmaSE_guesses <- runif(Nreps_global, min = 0.01, max = 0.2)
theta_guesses <- runif(Nreps_global, min = 1e-5, max = 0.1)


global_guesses_6 <- as.data.frame(cbind(
  s_0 = s_0_guesses,
  e_0 = e_0_guesses,
  a_0 = a_0_guesses,
  i_0 = i_0_guesses,
  h_0 = h_0_guesses,
  r_0 = r_0_guesses,
  # sigmaSE = sigmaSE_guesses,
  theta = theta_guesses,
  a_cov = a_cov_guesses,
  b_cov = b_cov_guesses,
  b_dis = b_dis_guesses,
  eps_A = eps_A_guesses,
  f_ai = f_ai_guesses,
  f_h = f_h_guesses,
  mu_rs = mu_rs_guesses,
  tau = tau_guesses,
  rho = rho_guesses,
  b_idps = b_idps_guesses
))
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_global_6 <- foreach (guess=iter(global_guesses_6, "row"), .combine=c) %dopar% {
  (
    m_local_mle_6
    %>% mif2(Nmif=Nmif, params=c(fixed_params_6, unlist(guess)))
    %>% mif2(Nmif=Nmif, cooling.fraction.50 = 0.1)
  )
}
end <- Sys.time()
sprintf("Run time of global iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_global_all_6 <- (
  foreach(
    i=1:Nreps_global,
    .combine=rbind
  ) %dopar% {
    logmeanexp(
      replicate(
        Nreps_eval,
        logLik(pfilter(m_6, params=coef(m_global_6[[i]]), Np=1000))
      ),
      se=TRUE
    )
  }
)
```

### Collect Results

```{r}
df_results_global_6 <- (
  data.frame(
    t(sapply(m_global_6, coef)),
    log_lik=loglik_global_all_6[,1],
    log_lik_se=loglik_global_all_6[,2]
  )
  %>% select(
    names(df_results_local_6)
  )
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_6)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_global_6, 
      file = model_output_filename_6, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostic

```{r}
model_params_6 <- read.table(
  model_output_filename_6,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_6$log_lik, digits=5)
```

#### Pair plot

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_6
  %>% filter(!is.na(log_lik))
  %>% filter((log_lik>max(log_lik) - 100))
  %>% bind_rows(global_guesses_6)
  %>% mutate(
    type = if_else(is.na(log_lik), "guess", "result")
  )
  %>% arrange(type)
)
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +f_h
    +eps_A
    +mu_rs
    +tau
    +rho
    +b_idps
    # +sigmaSE
    +theta
  ),
  data=res_to_plot,
  col=ifelse(res_to_plot$type == "guess", grey(0.5), "red")
)
```

#### Simulations from best model

CHECK SIMULATIONS OF N!!

```{r}
sims_global_best_ll_6 <- (
  m_global_6[[which(rank(-loglik_global_all_6[,1]) == 4)]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_ll_agg_6 <- (
  sims_global_best_ll_6
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = mean(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)

sims_global_best_sd_6 <- (
  m_global_6[[which.min(loglik_global_all_6[,2])]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_sd_agg_6 <- (
  sims_global_best_sd_6
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = mean(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 6
p1 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_ll_agg_6,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_ll_agg_6,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
p2 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_sd_agg_6,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_sd_agg_6,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best SD",
    x = "Date",
    y = "Counts"
  )
)
p1/p2
```

```{r}
coef(m_global_6[[which(rank(-loglik_global_all_6[,1]) == 1)]])
```

```{r}
#| fig-width: 10
#| fig-height: 3
(
  sims_global_best_ll_6
  %>% filter(.id != "data")
  %>% select(date, N)
  %>% ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
      mapping = aes(x = date, y = N), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + labs(
    x = "Date",
    y = "Counts"
  )
)
```

## Profile Likelihood

### b_cov Profiles

#### Search Box

```{r}
bcov_prof_lik_params_6 <- (
  model_params_6
  %>% filter(log_lik > max(log_lik) - 100)
  %>% select(-c(log_lik, log_lik_se, b_cov))
  %>% gather(variable, value)
  %>% group_by(variable)
  %>% summarise(
    min=min(value),
    max=max(value)
  )
  %>% ungroup()
  %>% column_to_rownames(
    var="variable"
  )
  %>% t()
)
  
```

#### Profile Starts

```{r}
profile_pts <- 10
bcov_profile_starts_6 <- (
  profile_design(
    b_cov = seq(1, 200, length=profile_pts),
    lower = bcov_prof_lik_params_6["min", ],
    upper = bcov_prof_lik_params_6["max", ],
    nprof = profile_Nreps
  )
  %>% select(
    names(df_results_local_6 %>% select(-c(log_lik, log_lik_se)))
  )
)
```

#### Parameters random walk

```{r}
bcov_profile_rw.sd_6 <- rw_sd(
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  h_0 = ivp(rw.sd_ivp),
  r_0 = ivp(rw.sd_ivp),
  a_cov = rw.sd_rp,
  b_cov = 0,
  b_dis = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_ai = rw.sd_rp,
  f_h = rw.sd_rp,
  mu_rs = rw.sd_rp,
  rho = rw.sd_rp,
  tau = rw.sd_rp,
  b_idps = rw.sd_rp
)
```

```{r}
bcov_profile_params_6 <- foreach (start=iter(bcov_profile_starts_6, "row"), .combine=rbind) %dopar% {
  mf <- (
    mif2(
      m_6,
      params=unlist(start),
      Np = Np,
      Nmif = ceiling(Nmif/2),
      cooling.fraction.50 = 0.5,
      rw.sd = bcov_profile_rw.sd_6
    )
    %>% mif2(
      cooling.fraction.50 = 0.1
    )
  )
  ll <- (
    replicate(
      Nreps_eval,
      (
        mf 
        %>% pfilter(Np=Np)
        %>% logLik()
      )
    )
    %>% logmeanexp(se=TRUE)
  )
  data.frame(
    as.list(coef(mf)),
    log_lik = ll[1],
    log_lik_se = ll[2]
  )
}
```

#### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_6)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      bcov_profile_params_6 %>% select(names(df_results_local_6)), 
      file = model_output_filename_6, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

#### Diagnostic

```{r}
model_params_6 <- read.table(
  model_output_filename_6,
  row.names = NULL,
  header = TRUE
)
```

```{r}
summary(model_params_6$log_lik, digits=5)
```

```{r}
#| fig-height: 6
#| fig-width: 6
(
  bcov_profile_params_6
  %>% group_by(b_cov)
  %>% summarise(
    log_lik = mean(log_lik),
    log_lik_se = mean(log_lik_se)
  )
  %>% filter(log_lik>max(log_lik) - 1000)
  %>% ungroup()
  %>% ggplot(
    aes(x=b_cov, y=log_lik)
  )
  + geom_point()
  + scale_x_continuous(limits=c(0, 500))
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_6
  %>% filter(log_lik>max(log_lik) - 100)
)
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +f_h
    +eps_A
    +mu_rs
    +tau
    +rho
    +b_idps
    +sigmaSE
  ),
  data=res_to_plot,
)
```

### mu_rs Profiles

#### Search Box

```{r}
murs_prof_lik_params_6 <- (
  model_params_6
  %>% filter(log_lik > max(log_lik) - 100)
  %>% select(-c(log_lik, log_lik_se, mu_rs))
  %>% gather(variable, value)
  %>% group_by(variable)
  %>% summarise(
    min=min(value),
    max=max(value)
  )
  %>% ungroup()
  %>% column_to_rownames(
    var="variable"
  )
  %>% t()
)
  
```

#### Profile Starts

```{r}
profile_pts <- 15
murs_profile_starts_6 <- (
  profile_design(
    mu_rs = seq(1, 25, length=profile_pts),
    lower = murs_prof_lik_params_6["min", ],
    upper = murs_prof_lik_params_6["max", ],
    nprof = profile_Nreps
  )
  %>% select(
    names(df_results_local_6 %>% select(-c(log_lik, log_lik_se)))
  )
)
```

#### Parameters random walk

```{r}
murs_profile_rw.sd_6 <- rw_sd(
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  h_0 = ivp(rw.sd_ivp),
  r_0 = ivp(rw.sd_ivp),
  a_cov = rw.sd_rp,
  b_cov = rw.sd_rp,
  b_dis = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_ai = rw.sd_rp,
  f_h = rw.sd_rp,
  mu_rs = 0,
  rho = rw.sd_rp,
  tau = rw.sd_rp,
  b_idps = rw.sd_rp
)
```

```{r}
murs_profile_params_6 <- foreach (start=iter(murs_profile_starts_6, "row"), .combine=rbind) %dopar% {
  mf <- (
    mif2(
      m_6,
      params=unlist(start),
      Np = Np,
      Nmif = ceiling(Nmif/2),
      cooling.fraction.50 = 0.5,
      rw.sd = murs_profile_rw.sd_6
    )
    %>% mif2(
      cooling.fraction.50 = 0.1
    )
  )
  ll <- (
    replicate(
      Nreps_eval,
      (
        mf 
        %>% pfilter(Np=Np)
        %>% logLik()
      )
    )
    %>% logmeanexp(se=TRUE)
  )
  data.frame(
    as.list(coef(mf)),
    log_lik = ll[1],
    log_lik_se = ll[2]
  )
}
```

#### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_6)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      murs_profile_params_6 %>% select(names(df_results_local_6)), 
      file = model_output_filename_6, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

#### Diagnostic

```{r}
model_params_6 <- read.table(
  model_output_filename_6,
  row.names = NULL,
  header = TRUE
)
```

```{r}
summary(model_params_6$log_lik, digits=5)
```

```{r}
#| fig-height: 6
#| fig-width: 6
(
  model_params_6
  %>% group_by(mu_rs)
  %>% summarise(
    log_lik = mean(log_lik),
    log_lik_se = mean(log_lik_se)
  )
  %>% filter(log_lik>max(log_lik) - 1000)
  %>% ungroup()
  %>% ggplot(
    aes(x=mu_rs, y=log_lik)
  )
  + geom_point()
  + scale_x_continuous(limits=c(0, 100))
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_6
  %>% filter(log_lik>max(log_lik) - 100)
)
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +f_h
    +eps_A
    +mu_rs
    +tau
    +rho
    +b_idps
  ),
  data=res_to_plot,
)
```

## Bayes Search

### Prior Functions

```{r}
rprior_6 <- Csnippet("
  s_0 = rbeta(1, 1);
  e_0 = rbeta(1, 1);
  a_0 = rbeta(1, 1);
  i_0 = rbeta(1, 1);
  h_0 = rbeta(1, 1);
  r_0 = rbeta(1, 1);
  a_cov = rgamma(a_cov_0, a_cov_1);
  b_cov = rgamma(b_cov_0, b_cov_1);
  b_dis = rgamma(b_dis_0, b_dis_1);
  f_ai = rbeta(f_ai_0, f_ai_1);
  f_h = rbeta(f_h_0, f_h_1);
  eps_A = rbeta(eps_A_0, eps_A_1);
  mu_rs = rgamma(mu_rs_0, mu_rs_1);
  tau = rgamma(tau_0, tau_1);
  rho = rbeta(rho_0, rho_1);
  b_idps = rbeta(b_idps_0, b_idps_1);
")

dprior_6 <- Csnippet("
  lik = (
    dbeta(s_0, 1, 1, give_log)
    + dbeta(e_0, 1, 1, give_log)
    + dbeta(a_0, 1, 1, give_log)
    + dbeta(i_0, 1, 1, give_log)
    + dbeta(h_0, 1, 1, give_log)
    + dbeta(r_0, 1, 1, give_log)
    + dgamma(a_cov, a_cov_0, a_cov_1, give_log)
    + dgamma(b_cov, b_cov_0, b_cov_1, give_log)
    + dgamma(b_dis, b_dis_0, b_dis_1, give_log)
    + dbeta(f_ai, f_ai_0, f_ai_1, give_log)
    + dbeta(f_h, f_h_0, f_h_1, give_log)
    + dbeta(eps_A, eps_A_0, eps_A_1, give_log)
    + dgamma(mu_rs, mu_rs_0, mu_rs_1, give_log)
    + dgamma(tau, tau_0, tau_1, give_log)
    + dbeta(rho, rho_0, rho_1, give_log)
    + dbeta(b_idps, b_idps_0, b_idps_1, give_log)
  );
  if (!give_log) lik = exp(lik);
")
```

### Prior params

```{r}
test_x <- seq(0, 50, by=0.1)
test_y <- dgamma(test_x, shape=4, scale=5)
# test_y <- dexp(test_x, 1/100)
plot(test_x, test_y)
```

```{r}
test_x <- seq(0, 1, by=0.01)
test_y <- dbeta(test_x, 1, 6)
plot(test_x, test_y)
```

```{r}
prior_params_6 <- c(
  a_cov_0 = 3,
  a_cov_1 = 200,
  b_cov_0 = 3,
  b_cov_1 = 200,
  b_dis_0 = 1,
  b_dis_1 = 1,
  f_ai_0 = 2,
  f_ai_1 = 2,
  f_h_0 = 1,
  f_h_1 = 6,
  eps_A_0 = 2,
  eps_A_1 = 6,
  mu_rs_0 = 4,
  mu_rs_1 = 5,
  tau_0 = 2,
  tau_1 = 1,
  rho_0 = 6,
  rho_1 = 2,
  b_idps_0 = 1,
  b_idps_1 = 6
)
```

### Approximate modeling

```{r}
start <- Sys.time()
bayes_start_coefs_6 <- model_params_6[which.max(model_params_6$log_lik),]
m_bayes_6 <- (
  m_6
  %>% pomp(
    rprior = rprior_6,
    dprior = dprior_6,
    paramnames = c(paramnames_6, names(prior_params_6)),
    params = c(
      bayes_start_coefs_6,
      prior_params_6
    )
  )
)
m_bayesapprox_6 <- bsmc2(
  data = m_bayes_6,
  Np=20000
)
end <- Sys.time()
sprintf("Run time of bsmc: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
df_bayesapprox_6 <- (
  m_bayesapprox_6
  %>% as.data.frame()
  %>% select(c(all_of(paramnames_6), .id))
)
```

```{r}
#| fig-width: 10
#| fig-height: 10
(
  df_bayesapprox_6
  %>% group_by(.id)
  %>% slice_sample(n=1000)
  %>% ungroup()
  %>% mutate(
    .id = factor(.id, levels=c("prior", "posterior")), 
  )
  %>% arrange(.id)
  %>% ggpairs(
    aes(color=.id, alpha=.id, fill=.id),
    columns = names(global_guesses_6),
    upper = list(continuous = "points"),
    progress = FALSE,
  )
  + scale_color_manual(
    values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_fill_manual(values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_alpha_manual(values = c("posterior" = 0.5, "prior" = 0.2))
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    plot.background = element_blank(),
    strip.background = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8)
  )
)
```

#### Simulations from parameter posterior

```{r}
approx_post_samples_6 <- (
  df_bayesapprox_6
  %>% filter(.id == "posterior")
  %>% select(-.id)
  %>% sample_n(100)
)
```

```{r}
approx_post_sims_6 <- (
  foreach (
    sample=iter(approx_post_samples_6, "row"),
    .combine=rbind
  ) %dopar% {
    (
      m_6
      %>% simulate(
        nsim = 1,
        params = unlist(sample),
        format = "data.frame",
        include.data = FALSE
      )
    )
  }
)
```

```{r}
approx_post_sims_agg_6 <- (
  approx_post_sims_6
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 3
(
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = approx_post_sims_agg_6,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = approx_post_sims_agg_6,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + scale_y_continuous(limits = c(0, 120))
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
```

### PMCMC

#### Proposal

```{r}
prop_logit <- 0.05
bayes_sd_6 <- c(
  s_0 = prop_logit,
  e_0 = prop_logit,
  a_0 = prop_logit,
  i_0 = prop_logit,
  r_0 = prop_logit,
  a_cov = 20,
  b_cov = 20,
  b_dis = 10,
  eps_A = prop_logit,
  f_ai = prop_logit,
  f_h = prop_logit,
  mu_rs = prop_logit,
  tau = prop_logit,
  rho = prop_logit,
  b_idps = prop_logit
)
```

#### Run search

```{r}
start <- Sys.time()
m_bayesfull_6 <- (
  foreach (
    i = 1:5, 
    .combine = c
  ) %dopar% {
    pmcmc(
      m_bayes_6,
      # m_bayesapprox_6,
      Nmcmc=5000, #Nbayes_iter,  # 40000
      Np=100,
      # proposal=mvn_diag_rw(bayes_sd_2)
      proposal=mvn_rw_adaptive(
        bayes_sd_6,
        scale.start = 100,
        scale.cooling = 0.95,
        shape.start = 2000
        # shape.start = 100
      )
    )
  }
)
end <- Sys.time()
as.integer(round(difftime(end, start, units='mins')))
```

```{r}
#| fig-width: 12
#| fig-asp: 1
plot(
  m_bayesfull_6,
  pars = c(
    "loglik",
    "log.prior",
    "a_cov",
    "b_cov",
    "b_dis",
    "b_idps",
    "f_ai",
    "f_h",
    "eps_A",
    "mu_rs",
    "tau",
    "rho"
  )
)
```

```{r}
datalist <- list()
for (i in 1:length(m_bayes_2)) {
  datalist[[i]] <- (
    traces(m_bayes_2[[i]]) 
    %>% as.data.frame() 
    %>% select(paramnames_2)
    %>% tail(1000)
  )
}
df_bayes_2 <- bind_rows(datalist)
```

```{r}
#| fig-width: 8
#| fig-height: 8
(
  df_bayes_2
  %>% ggpairs(
    columns = names(global_guesses_2),
    lower = "blank",
    upper = list(continuous = wrap("points", alpha = 0.3)),
    progress = FALSE,
  )
  + theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
)
```

# With Covariate Modulation + fixed IDPS + Hospitalized

```{r}
model_output_filename_7 <- file.path(output_dir, "uvira_multioutbreak_cov_fixidps_hosp.csv")
```

## Model Definition

### Fixed Parameters

```{r}
N_0 <- uvira_pop_2016
mu_latend <- 1 / ((5/7) / 52) # inverse of latent period (5 days transformed in weeks)
mu_ar <- 1 / ((10/7) / 52) # inverse of asymptomatic period (10 days transformed in weeks)
mu_ir <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)
mu_hr <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)
b_idps <- 0.02              # Fixed idp effect

fixed_params_7 <- c(
  N_0 = N_0,
  mu_latend = mu_latend,
  mu_ar = mu_ar,
  mu_ir = mu_ir,
  mu_hr = mu_hr,
  b_idps = b_idps
)
```

### Initialization Function

```{r}
rinit_7 <- Csnippet("
  double m = (f_N * N_0)/(s_0+e_0+a_0+i_0+h_0+r_0);
  S = nearbyint(s_0*m);
  E = nearbyint(e_0*m);
  A = nearbyint(a_0*m);
  I = nearbyint(i_0*m);
  H = nearbyint(h_0*m);
  R = nearbyint(r_0*m);
  N = S + E + A + I + H + R;
  C = 0;
  W = 0;
")
```

### Step Function

```{r}
rproc_7 <- Csnippet("
  //double foi, births;
  double foi, births, dw;
  double rate[14];
  double trans[14];
  double rate_idps[5];
  int trans_idps[5];

  // idps
  if (idps < 0) {
    if (N > H) {
      double idps_scaled = nearbyint(-idps * b_idps * (N-H-1));
      rate_idps[0] = S/(N-H);
      rate_idps[1] = E/(N-H);
      rate_idps[2] = A/(N-H);
      rate_idps[3] = I/(N-H);
      rate_idps[4] = 1 - rate_idps[0] - rate_idps[1] - rate_idps[2] - rate_idps[3];
      rmultinom(idps_scaled, &rate_idps[0], 5, &trans_idps[0]);
      S -= trans_idps[0];
      E -= trans_idps[1];
      A -= trans_idps[2];
      I -= trans_idps[3];
      R -= trans_idps[4];
    }
  } 
  else{
    double idps_scaled = idps * b_idps * (N-H-1);
    double idps_in = nearbyint(idps_scaled / 5);
    trans_idps[0] = idps_in;
    trans_idps[1] = idps_in;
    trans_idps[2] = idps_in;
    trans_idps[3] = idps_in;
    trans_idps[4] = idps_in;
    S += trans_idps[0];
    E += trans_idps[1];
    A += trans_idps[2];
    I += trans_idps[3];
    R += trans_idps[4];
  }
  
  N = S + E + A + I + H + R;

  // Poisson births
  births = rpois(birthrate * N * dt);

  // expected force of infection
  foi = (a_cov + b_cov * cov + b_dis * dis)*(I + eps_A * A)/N;

  // white noise (extrademographic stochasticity)
  dw = rgammawn(sigmaSE,dt);

  rate[0] = foi*dw/dt;  // stochastic force of infection
  //rate[0] = foi;  // stochastic force of infection
  rate[1] = deathrate;        // natural death rate
  rate[2] = mu_latend * f_ai;      // transition to asymp
  rate[3] = mu_latend * (1 - f_ai) * (1 - (f_h * I/N)); // transition to symp
  rate[4] = mu_latend * (1 - f_ai) * (f_h * I/N); // transition to hospitalized
  rate[5] = deathrate;        // natural death rate
  rate[6] = mu_ar;       // asymp -> recovery
  rate[7] = deathrate;        // natural death rate
  rate[8] = mu_ir;       // symp -> recovered
  rate[9] = deathrate;        // natural death rate
  rate[10] = mu_hr;       // hospitalized -> recovered
  rate[11] = deathrate;        // natural death rate
  rate[12] = mu_rs;       // recovered -> susceptible
  rate[13] = deathrate;        // natural death rate

  // transitions between classes
  reulermultinom(2, S, &rate[0], dt, &trans[0]);
  reulermultinom(4, E, &rate[2], dt, &trans[2]);
  reulermultinom(2, A, &rate[6], dt, &trans[6]);
  reulermultinom(2, I, &rate[8], dt, &trans[8]);
  reulermultinom(2, H, &rate[10], dt, &trans[10]);
  reulermultinom(2, R, &rate[12], dt, &trans[12]);

  S += births - trans[0] - trans[1] + trans[12];
  E += trans[0] - trans[2] - trans[3] - trans[4] - trans[5];
  A += trans[2] - trans[6] - trans[7];
  I += trans[3] - trans[8] - trans[9];
  H += trans[4] - trans[10] - trans[11];
  R += trans[6] + trans[8] + trans[10] - trans[12] - trans[13];
  
  // Measured
  C += trans[4];
  
  // Noise
  W += (dw - dt)/sigmaSE;  
  
  N = S + E + A + I + H + R;
")
```

### Observation Function

```{r}
dmeas_7 <- Csnippet("
  double f;
  double tol = 1.0e-25;
  if (tau > 0.0) {
    f = dnbinom_mu(nearbyint(reports), 1.0/tau, rho*C, give_log) + tol;
  }
  else {
    f = dpois(nearbyint(reports), rho*C, give_log) + tol;
  }
  lik = (give_log) ? f : exp(f);
")


# dmeas_6 <- Csnippet("
#   double tol = 1.0e-25;
#   double mean_reports = rho*C;
#   double sd_reports = sqrt(pow(tau*C,2) + mean_reports);
#   if(reports > 0.0){
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0)
#       - pnorm(reports-0.5,mean_reports,sd_reports,1,0) + tol;
#   } else{
#     lik = pnorm(reports+0.5,mean_reports,sd_reports,1,0) + tol;
#   }
#   if (give_log) lik = log(lik);
# ")

rmeas_7 <- Csnippet("
  if (tau > 0.0) {
    reports = rnbinom_mu(1.0/tau, rho*C);
  }
  else {
    reports = rpois(rho*C);
  }
")

# rmeas_6 <- Csnippet("
#   reports = rnorm(rho*C, sqrt( pow(tau*C,2) + rho*C ) );
#   if (reports > 0.0) {
#     reports = nearbyint(reports);
#   } else {
#     reports = 0.0;
#  }")

```

## Initial parameter estimates

```{r}
f_N_guess <- 0.5
a_cov_guess <- 80
b_cov_guess <- 250
eps_A_guess <- 0.08
f_ai_guess <- 0.55
f_h_guess <- 0.25
mu_rs_guess <- 1 / ((150/7) / 52) # inverse of immunity period (50 days transformed in weeks)
rho_guess <- 0.9
s_0_guess <- 0.55
h_0_guess <- df_reports$reports[1] / N_0
i_0_guess <- 0.005 #min(floor(H_0_guess / (1 - exp(-mu_ih_guess))), N_0)
a_0_guess <- 0.01 #min(floor(f_ai_guess/(1 - f_ai_guess) * I_0_guess), N_0)
e_0_guess <- 0.02 #min(floor((A_0_guess + I_0_guess) / (1 - exp(-mu_latend_guess))), N_0)
r_0_guess <- max(1 - s_0_guess - e_0_guess - a_0_guess - i_0_guess - h_0_guess, 0)
tau_guess <- 0.002
b_dis_guess <- 10
sigmaSE_guess <- 0.05

init_params_7 <- c(
  fixed_params_7,
  f_N = f_N_guess,
  sigmaSE = sigmaSE_guess,
  s_0 = s_0_guess,
  e_0 = e_0_guess,
  a_0 = a_0_guess,
  i_0 = i_0_guess,
  h_0 = h_0_guess,
  r_0 = r_0_guess,
  a_cov = a_cov_guess,
  b_cov = b_cov_guess,
  eps_A = eps_A_guess,
  f_ai = f_ai_guess,
  f_h = f_h_guess,
  mu_rs = mu_rs_guess,
  rho = rho_guess,
  tau = tau_guess,
  b_dis = b_dis_guess
)
```

## POMP object

```{r}
statenames_7 <- c(
  "S", 
  "E", 
  "A", 
  "I", 
  "H",
  "R", 
  "C",
  "W",
  "N"
)
obsnames_7 <- "reports"
covar_7 <- covariate_table(
  df_covar %>% select(c(date, cov, idps, dis, birthrate, deathrate)),
  times="date"
)
covarnames_7 <- c(
  "cov", 
  "idps", 
  "dis",
  "birthrate", 
  "deathrate"
)
rp_names_log_7 <- c(
  "sigmaSE",
  "a_cov",
  "b_cov",
  "b_dis",
  "mu_rs",
  "tau"
)
rp_names_logit_7 <- c(
  "f_N",
  "f_ai",
  "eps_A",
  "f_h",
  "rho"
)
ivp_names_7 <- c(
  "s_0",
  "e_0",
  "a_0",
  "i_0",
  "h_0",
  "r_0"
)

paramnames_7 <- c(rp_names_log_7, rp_names_logit_7, ivp_names_7, names(fixed_params_7))
accumvars_7 <- c(
  "C",
  "W"
)
partrans_7 <- parameter_trans(
  log=rp_names_log_7,
  logit=rp_names_logit_7,
  barycentric=ivp_names_7
)

m_7 <- (
  df_model
  %>% select(date, reports)
  %>% pomp(
    times = "date",
    t0 = df_covar$date[1],
    rprocess = euler(
      step.fun = rproc_7,
      delta.t = 1/52/7
    ),
    rinit = rinit_7,
    rmeasure = rmeas_7,
    dmeasure = dmeas_7,
    obsnames = obsnames_7,
    covar = covar_7,
    covarnames = covarnames_7,
    accumvars = accumvars_7,
    statenames = statenames_7,
    paramnames = paramnames_7,
    partrans = partrans_7,
    params = init_params_7
  )
)
```

## Simulations

```{r}
sims_7 <- (
  m_7
  %>% simulate(
    nsim = 20,
    format = "data.frame",
    include.data = TRUE
  )
)
```

```{r}
pf_sim_7 <- pfilter(m_7, Np = 1000)
lk_sim_7 <- logLik(pf_sim_7)
lk_sim_7
```

```{r}
(
  sims_7
  %>% filter(.id == 1)
  %>% select(
    date, 
    S, 
    E, 
    A, 
    I, 
    H, 
    C,
    R, 
    W,
    N
  )
  %>% pivot_longer(
    cols = -date,
    names_to = "compartment",
    values_to = "counts"
  )
  %>% ggplot(
    aes(x = date, y = counts, color = compartment)
  )
  + facet_wrap(~compartment, scales = "free_y")
  + geom_line()
  + guides(color = "none")
)
```

```{r}
#| fig-width: 4.5
#| fig-height: 3
(
  sims_7
  %>% mutate(
    date = as.Date("2016-01-01") + 7 * date
  )
  %>% ggplot(
    aes(x = date, y = reports, group=.id, color=.id=="data")
  )
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line()
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases",
    x = "Date",
    y = "Counts"
  )
)
ggsave(filename = "test_pomp_simulation.png", path = img_dir)
```

## Local Search

```{r}
# Parameters 
rw.sd_rp <- 0.02
rw.sd_ivp <- 0.2
cooling.fraction.50 <- 0.5 # Level of parameter variance after 50% of iterations
rw.sd_7 <- rw_sd(
  f_N = ivp(rw.sd_ivp),
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  h_0 = ivp(rw.sd_ivp),
  r_0 = ivp(rw.sd_ivp),
  sigmaSE = rw.sd_rp,
  a_cov = rw.sd_rp,
  b_cov = rw.sd_rp,
  b_dis = rw.sd_rp,
  f_ai = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_h = rw.sd_rp,
  mu_rs = rw.sd_rp,
  rho = rw.sd_rp,
  tau = rw.sd_rp
)
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_local_7 <- foreach (
  i=1:Nreps_local, 
  .combine=c 
) %dopar% {
  init_params_7[rp_names_log_7] <- rlnorm(
    n=length(rp_names_log_7), 
    meanlog=log(init_params_7[rp_names_log_7]),
    sdlog=1
  )
  init_params_7[c(rp_names_logit_7, ivp_names_7)] <- runif(
    n=length(c(rp_names_logit_7, ivp_names_7)),
    min=0.01,
    max=0.99
  )
  (
    mif2(
      m_7,
      Np=Np,
      Nmif=Nmif,
      params=init_params_7,
      cooling.fraction.50 = cooling.fraction.50,
      rw.sd=rw.sd_7
    )
  )
}
end <- Sys.time()
sprintf("Run time of local iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_local_all_7 <- foreach(
  mf = m_local_7,
  .combine=rbind
) %dopar% {
  pf <- replicate(
    n = Nreps_eval,
    logLik(pfilter(mf, Np = Np))
  )
  logmeanexp(pf, se = TRUE)
}
```

Focus on the highest estimated likelihood to get MLE

```{r}
m_local_mle_7 <- m_local_7[[which.max(loglik_local_all_7[,1])]]
params_local_7 <- coef(m_local_mle_7)
loglik_local_best_7 <- logmeanexp(
  replicate(
    n = Nreps_eval,
    logLik(pfilter(m_local_mle_7, Np = 1000))
  ),
  se = TRUE
)
```

```{r}
loglik_local_best_7
```

### Collect Results

```{r}
df_results_local_7 <- data.frame(
  t(sapply(m_local_7, coef)),
  log_lik=loglik_local_all_7[,1],
  log_lik_se=loglik_local_all_7[,2]
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_7)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_local_7, 
      file = model_output_filename_7, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostics

```{r}
model_params_7 <- read.table(
  model_output_filename_7,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_7$log_lik, digits = 5)
```

#### Pair plot

```{r}
(
  m_local_7
  %>% traces()
  %>% melt()
  %>% filter(!name %in% c(names(fixed_params_7), ivp_names_7))
  %>% ggplot(
    aes(
      x=iteration,
      y=value,
      group=.L1,
      color=factor(.L1)
    )
  )
  + geom_line()
  + guides(color="none")
  + facet_wrap(~name, scales="free_y")
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
data_to_plot <- (
  model_params_7
  %>% filter(!is.na(log_lik))
  %>% filter(log_lik > max(log_lik) - 100)
)

pairs(
  ~(
    log_lik
    +f_N
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +eps_A
    +mu_rs
    +tau
    +rho
    +sigmaSE
  ),
  data=data_to_plot
)
```

## Global Search

### Search box

```{r}
f_N_guesses <- runif(Nreps_global, min = 0.05, max = 0.999)
s_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
e_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
i_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
h_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
r_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_cov_guesses <- runif(Nreps_global, min = 0, max = 100)
b_cov_guesses <- runif(Nreps_global, min = 2, max = 200)
b_dis_guesses <- runif(Nreps_global, min = 0, max = 50)
eps_A_guesses <- runif(Nreps_global, min = 0.01, max = 0.5)
f_ai_guesses <- runif(Nreps_global, min = 0.1, max = 0.99)
f_h_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
mu_rs_guesses <- runif(Nreps_global, min = 1e-3, max = 50)
rho_guesses <- runif(Nreps_global, min = 0.01, max = 1)
tau_guesses <- runif(Nreps_global, min = 1e-4, max = 5)
sigmaSE_guesses <- runif(Nreps_global, min = 0.01, max = 0.2)


global_guesses_7 <- as.data.frame(cbind(
  f_N = f_N_guesses,
  s_0 = s_0_guesses,
  e_0 = e_0_guesses,
  a_0 = a_0_guesses,
  i_0 = i_0_guesses,
  h_0 = h_0_guesses,
  r_0 = r_0_guesses,
  sigmaSE = sigmaSE_guesses,
  a_cov = a_cov_guesses,
  b_cov = b_cov_guesses,
  b_dis = b_dis_guesses,
  eps_A = eps_A_guesses,
  f_ai = f_ai_guesses,
  f_h = f_h_guesses,
  mu_rs = mu_rs_guesses,
  tau = tau_guesses,
  rho = rho_guesses
))
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_global_7 <- foreach (guess=iter(global_guesses_7, "row"), .combine=c) %dopar% {
  (
    m_local_mle_7
    %>% mif2(Nmif=Nmif, params=c(fixed_params_7, unlist(guess)))
    %>% mif2(Nmif=Nmif, cooling.fraction.50 = 0.1)
  )
}
end <- Sys.time()
sprintf("Run time of global iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_global_all_7 <- (
  foreach(
    i=1:Nreps_global,
    .combine=rbind
  ) %dopar% {
    logmeanexp(
      replicate(
        Nreps_eval,
        logLik(pfilter(m_7, params=coef(m_global_7[[i]]), Np=1000))
      ),
      se=TRUE
    )
  }
)
```

### Collect Results

```{r}
df_results_global_7 <- (
  data.frame(
    t(sapply(m_global_7, coef)),
    log_lik=loglik_global_all_7[,1],
    log_lik_se=loglik_global_all_7[,2]
  )
  %>% select(
    names(df_results_local_7)
  )
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_7)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_global_7, 
      file = model_output_filename_7, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostic

```{r}
model_params_7 <- read.table(
  model_output_filename_7,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_7$log_lik, digits=5)
```

#### Pair plot

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_7
  %>% filter(!is.na(log_lik))
  %>% filter((log_lik>max(log_lik) - 100))
  %>% bind_rows(global_guesses_7)
  %>% mutate(
    type = if_else(is.na(log_lik), "guess", "result")
  )
  %>% arrange(type)
)
pairs(
  ~(
    log_lik
    +f_N
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +f_h
    +eps_A
    +mu_rs
    +tau
    +rho
    +sigmaSE
  ),
  data=res_to_plot,
  col=ifelse(res_to_plot$type == "guess", grey(0.5), "red")
)
```

#### Simulations from best model

```{r}
sims_global_best_ll_7 <- (
  m_global_7[[which(rank(-loglik_global_all_7[,1]) == 1)]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_ll_agg_7 <- (
  sims_global_best_ll_7
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)

sims_global_best_sd_7 <- (
  m_global_7[[which.min(loglik_global_all_7[,2])]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_sd_agg_7 <- (
  sims_global_best_sd_7
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 6
p1 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_ll_agg_7,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_ll_agg_7,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
p2 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_sd_agg_7,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_sd_agg_7,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best SD",
    x = "Date",
    y = "Counts"
  )
)
p1/p2
```

```{r}
coef(m_global_7[[which(rank(-loglik_global_all_7[,1]) == 1)]])
```

```{r}
#| fig-width: 10
#| fig-height: 3
(
  sims_global_best_ll_7
  %>% filter(.id != "data")
  %>% select(date, N)
  %>% ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
      mapping = aes(x = date, y = N), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + labs(
    x = "Date",
    y = "Counts"
  )
)
```

# With Separate Recovered + Hospitalized

```{r}
model_output_filename_8 <- file.path(output_dir, "uvira_multioutbreak_sep_rec_hosp.csv")
```

## Model Definition

### Fixed Parameters

```{r}
N_0 <- uvira_pop_2016
mu_latend <- 1 / ((5/7) / 52) # inverse of latent period (5 days transformed in weeks)
mu_ar <- 1 / ((10/7) / 52) # inverse of asymptomatic period (10 days transformed in weeks)
mu_ir <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)
mu_hr <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)

fixed_params_8 <- c(
  N_0 = N_0,
  mu_latend = mu_latend,
  mu_ar = mu_ar,
  mu_ir = mu_ir,
  mu_hr = mu_hr
)
```

### Initialization Function

```{r}
rinit_8 <- Csnippet("
  double m = N_0/(s_0+e_0+a_0+i_0+h_0+ra_0+ri_0);
  S = nearbyint(s_0*m);
  E = nearbyint(e_0*m);
  A = nearbyint(a_0*m);
  I = nearbyint(i_0*m);
  H = nearbyint(h_0*m);
  RA = nearbyint(ra_0*m);
  RI = nearbyint(ri_0*m);
  N = S + E + A + I + H + RA + RI;
  C = 0;
  W = 0;
")
```

### Step Function

```{r}
rproc_8 <- Csnippet("
  double foi, births, hosp, dw;
  double rate[16];
  double trans[16];
  int idps_scaled;
  double rate_idps[6];
  int trans_idps[6];

  // idps
  if (idps < 0) {
    if (N > H) {
      idps_scaled = floor(fmin((-idps * b_idps), (N-H)/10));
      double s = (N-H) / (S + E + A + I + RA + RI);
      rate_idps[0] = s*S/(N-H);
      rate_idps[1] = s*E/(N-H);
      rate_idps[2] = s*A/(N-H);
      rate_idps[3] = s*I/(N-H);
      rate_idps[4] = s*RA/(N-H); 
      rate_idps[5] = s*RI/(N-H);
      rmultinom(idps_scaled, &rate_idps[0], 6, &trans_idps[0]);
      S -= fmin(trans_idps[0], S);
      E -= fmin(trans_idps[1], E);
      A -= fmin(trans_idps[2], A);
      I -= fmin(trans_idps[3], I);
      RA -= fmin(trans_idps[4], RA);
      RI -= fmin(trans_idps[5], RI);
    }
  }
  if (idps > 0) {
    idps_scaled = floor(fmin((idps * b_idps)/6, (N-H)/10));
    trans_idps[0] = idps_scaled;
    trans_idps[1] = idps_scaled;
    trans_idps[2] = idps_scaled;
    trans_idps[3] = idps_scaled;
    trans_idps[4] = idps_scaled;
    trans_idps[5] = idps_scaled;
    S += trans_idps[0];
    E += trans_idps[1];
    A += trans_idps[2];
    I += trans_idps[3];
    RA += trans_idps[4];
    RI += trans_idps[5];
  }
  
  N = S + E + A + I + H + RA + RI;

  // Poisson births
  births = rpois(birthrate * N * dt);

  // expected force of infection
  foi = (a_cov + b_cov * cov + b_dis * dis)*(I + eps_A * A)/N;
  
  // hospitalization rate
  hosp = f_h * (1/(1 + H/N));
  
  // white noise (extrademographic stochasticity)
  dw = rgammawn(sigmaSE,dt);

  rate[0] = foi*dw/dt;  // stochastic force of infection
  rate[1] = deathrate;        // natural death rate
  rate[2] = mu_latend * f_ai;      // transition to asymp
  rate[3] = mu_latend * (1 - f_ai) * (1 - hosp); // transition to symp
  rate[4] = mu_latend * (1 - f_ai) * hosp; // transition to hospitalized
  rate[5] = deathrate;        // natural death rate
  rate[6] = mu_ar;       // asymp -> recovery
  rate[7] = deathrate;        // natural death rate
  rate[8] = mu_ir;       // symp -> recovered
  rate[9] = deathrate;        // natural death rate
  rate[10] = mu_hr;       // hospitalized -> recovered
  rate[11] = deathrate;        // natural death rate
  rate[12] = mu_ras;       // recovered -> susceptible
  rate[13] = deathrate;        // natural death rate
  rate[14] = mu_ris;       // recovered -> susceptible
  rate[15] = deathrate;        // natural death rate

  // transitions between classes
  reulermultinom(2, S, &rate[0], dt, &trans[0]);
  reulermultinom(4, E, &rate[2], dt, &trans[2]);
  reulermultinom(2, A, &rate[6], dt, &trans[6]);
  reulermultinom(2, I, &rate[8], dt, &trans[8]);
  reulermultinom(2, H, &rate[10], dt, &trans[10]);
  reulermultinom(2, RA, &rate[12], dt, &trans[12]);
  reulermultinom(2, RI, &rate[14], dt, &trans[14]);

  S += births - trans[0] - trans[1] + trans[12] + trans[14];
  E += trans[0] - trans[2] - trans[3] - trans[4] - trans[5];
  A += trans[2] - trans[6] - trans[7];
  I += trans[3] - trans[8] - trans[9];
  H += trans[4] - trans[10] - trans[11];
  RA += trans[6] - trans[12] - trans[13];
  RI += trans[8] + trans[10] - trans[14] - trans[15];
  
  // Measured
  C += trans[4];
  
  // Noise
  W += (dw - dt)/sigmaSE;  
  
  N = S + E + A + I + H + RA + RI;
")
```

### Observation Function

```{r}
dmeas_8 <- Csnippet("
  double f;
  double tol = 1.0e-25;
  if (tau > 0.0) {
    f = dnbinom_mu(nearbyint(reports), 1.0/tau, rho*C, give_log) + tol;
  }
  else {
    f = dpois(nearbyint(reports), rho*C, give_log) + tol;
  }
  lik = (give_log) ? f : exp(f);
")

rmeas_8 <- Csnippet("
  reports = rnorm(rho*C, sqrt( pow(tau*C,2) + rho*C ) );
  if (reports > 0.0) {
    reports = nearbyint(reports);
  } else {
    reports = 0.0;
 }")

```

## Initial parameter estimates

```{r}
a_cov_guess <- 70
b_cov_guess <- 250
eps_A_guess <- 0.08
f_ai_guess <- 0.55
f_h_guess <- 0.03
mu_ras_guess <- 1 / ((100/7) / 52) # inverse of immunity period (days transformed in weeks)
mu_ris_guess <- 1 / ((365/7) / 52) # inverse of immunity period (days transformed in weeks)
rho_guess <- 0.8
s_0_guess <- 0.55
h_0_guess <- df_reports$reports[1] / N_0
i_0_guess <- 0.005 #min(floor(H_0_guess / (1 - exp(-mu_ih_guess))), N_0)
a_0_guess <- 0.01 #min(floor(f_ai_guess/(1 - f_ai_guess) * I_0_guess), N_0)
e_0_guess <- 0.02 #min(floor((A_0_guess + I_0_guess) / (1 - exp(-mu_latend_guess))), N_0)
ra_0_guess <- 0.3 #min(floor((A_0_guess + I_0_guess) / (1 - exp(-mu_ar_guess))), N_0)
ri_0_guess <- max(1 - s_0_guess - e_0_guess - a_0_guess - i_0_guess - h_0_guess - ra_0_guess, 0)
tau_guess <- 0.002
b_idps_guess <- 0.05
b_dis_guess <- 10
sigmaSE_guess <- 0.05

init_params_8 <- c(
  fixed_params_8,
  sigmaSE = sigmaSE_guess,
  s_0 = s_0_guess,
  e_0 = e_0_guess,
  a_0 = a_0_guess,
  i_0 = i_0_guess,
  h_0 = h_0_guess,
  ra_0 = ra_0_guess,
  ri_0 = ri_0_guess,
  a_cov = a_cov_guess,
  b_cov = b_cov_guess,
  eps_A = eps_A_guess,
  f_ai = f_ai_guess,
  f_h = f_h_guess,
  mu_ras = mu_ras_guess,
  mu_ris = mu_ris_guess,
  rho = rho_guess,
  tau = tau_guess,
  b_dis = b_dis_guess,
  b_idps = b_idps_guess
)
```

## POMP object

```{r}
statenames_8 <- c(
  "S", 
  "E", 
  "A", 
  "I", 
  "H",
  "RA", 
  "RI",
  "C",
  "W",
  "N"
)
obsnames_8 <- "reports"
covar_8 <- covariate_table(
  df_covar %>% select(c(date, cov, idps, dis, birthrate, deathrate)),
  times="date"
)
covarnames_8 <- c(
  "cov", 
  "idps", 
  "dis",
  "birthrate", 
  "deathrate"
)
rp_names_log_8 <- c(
  "sigmaSE",
  "a_cov",
  "b_cov",
  "b_dis",
  "mu_ras",
  "mu_ris",
  "tau"
)
rp_names_logit_8 <- c(
  "f_ai",
  "eps_A",
  "f_h",
  "rho",
  "b_idps"
)
ivp_names_8 <- c(
  "s_0",
  "e_0",
  "a_0",
  "i_0",
  "h_0",
  "ra_0",
  "ri_0"
)

paramnames_8 <- c(rp_names_log_8, rp_names_logit_8, ivp_names_8, names(fixed_params_8))
accumvars_8 <- c(
  "C",
  "W"
)
partrans_8 <- parameter_trans(
  log=rp_names_log_8,
  logit=rp_names_logit_8,
  barycentric=ivp_names_8
)

m_8 <- (
  df_model
  %>% select(date, reports)
  %>% pomp(
    times = "date",
    t0 = df_covar$date[1],
    rprocess = euler(
      step.fun = rproc_8,
      delta.t = 1/52/7
    ),
    rinit = rinit_8,
    rmeasure = rmeas_8,
    dmeasure = dmeas_8,
    obsnames = obsnames_8,
    covar = covar_8,
    covarnames = covarnames_8,
    accumvars = accumvars_8,
    statenames = statenames_8,
    paramnames = paramnames_8,
    partrans = partrans_8,
    params = init_params_8
  )
)
```

## Simulations

```{r}
sims_8 <- (
  m_8
  %>% simulate(
    nsim = 20,
    format = "data.frame",
    include.data = TRUE
  )
)
```

```{r}
pf_sim_8 <- pfilter(m_8, Np = 1000)
lk_sim_8 <- logLik(pf_sim_8)
lk_sim_8
```

```{r}
(
  sims_8
  %>% filter(.id == 1)
  %>% select(
    date, 
    S, 
    E, 
    A, 
    I, 
    H, 
    C,
    RA, 
    RI,
    W,
    N
  )
  %>% pivot_longer(
    cols = -date,
    names_to = "compartment",
    values_to = "counts"
  )
  %>% ggplot(
    aes(x = date, y = counts, color = compartment)
  )
  + facet_wrap(~compartment, scales = "free_y", ncol = 3)
  + geom_line()
  + guides(color = "none")
)
```

```{r}
#| fig-width: 4.5
#| fig-height: 3
(
  sims_8
  %>% mutate(
    date = as.Date("2016-01-01") + 7 * date
  )
  %>% ggplot(
    aes(x = date, y = reports, group=.id, color=.id=="data")
  )
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line()
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases",
    x = "Date",
    y = "Counts"
  )
)
ggsave(filename = "test_pomp_simulation.png", path = img_dir)
```

## Local Search

```{r}
# Parameters 
rw.sd_rp <- 0.02
rw.sd_ivp <- 0.2
cooling.fraction.50 <- 0.5 # Level of parameter variance after 50% of iterations
rw.sd_8 <- rw_sd(
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  h_0 = ivp(rw.sd_ivp),
  ra_0 = ivp(rw.sd_ivp),
  ri_0 = ivp(rw.sd_ivp),
  sigmaSE = rw.sd_rp,
  a_cov = rw.sd_rp,
  b_cov = rw.sd_rp,
  b_dis = rw.sd_rp,
  f_ai = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_h = rw.sd_rp,
  mu_ras = rw.sd_rp,
  mu_ris = rw.sd_rp,
  rho = rw.sd_rp,
  b_idps = rw.sd_rp,
  tau = rw.sd_rp
)
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_local_8 <- foreach (
  i=1:Nreps_local, 
  .combine=c 
) %dopar% {
  init_params_8[rp_names_log_8] <- rlnorm(
    n=length(rp_names_log_8), 
    meanlog=log(init_params_8[rp_names_log_8]),
    sdlog=1
  )
  init_params_8[c(rp_names_logit_8, ivp_names_8)] <- runif(
    n=length(c(rp_names_logit_8, ivp_names_8)),
    min=0.01,
    max=0.99
  )
  (
    mif2(
      m_8,
      Np=Np,
      Nmif=Nmif,
      params=init_params_8,
      cooling.fraction.50 = cooling.fraction.50,
      rw.sd=rw.sd_8
    )
  )
}
end <- Sys.time()
sprintf("Run time of local iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_local_all_8 <- foreach(
  mf = m_local_8,
  .combine=rbind
) %dopar% {
  pf <- replicate(
    n = Nreps_eval,
    logLik(pfilter(mf, Np = Np))
  )
  logmeanexp(pf, se = TRUE)
}
```

Focus on the highest estimated likelihood to get MLE

```{r}
m_local_mle_8 <- m_local_8[[which.max(loglik_local_all_8[,1])]]
params_local_8 <- coef(m_local_mle_8)
loglik_local_best_8 <- logmeanexp(
  replicate(
    n = Nreps_eval,
    logLik(pfilter(m_local_mle_8, Np = 1000))
  ),
  se = TRUE
)
```

```{r}
loglik_local_best_8
```

### Collect Results

```{r}
df_results_local_8 <- data.frame(
  t(sapply(m_local_8, coef)),
  log_lik=loglik_local_all_8[,1],
  log_lik_se=loglik_local_all_8[,2]
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_8)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_local_8, 
      file = model_output_filename_8, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostics

```{r}
model_params_8 <- read.table(
  model_output_filename_8,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_8$log_lik, digits = 5)
```

#### Pair plot

```{r}
(
  m_local_8
  %>% traces()
  %>% melt()
  %>% filter(!name %in% c(names(fixed_params_8), ivp_names_8))
  %>% ggplot(
    aes(
      x=iteration,
      y=value,
      group=.L1,
      color=factor(.L1)
    )
  )
  + geom_line()
  + guides(color="none")
  + facet_wrap(~name, scales="free_y")
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
data_to_plot <- (
  model_params_8
  %>% filter(!is.na(log_lik))
  %>% filter(log_lik > max(log_lik) - 100)
)

pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +eps_A
    +mu_ras
    +mu_ris
    +tau
    +rho
    +b_idps
    +sigmaSE
  ),
  data=data_to_plot
)
```

## Global Search

### Search box

```{r}
s_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
e_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
i_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
h_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
ra_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
ri_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_cov_guesses <- runif(Nreps_global, min = 0, max = 100)
b_cov_guesses <- runif(Nreps_global, min = 2, max = 200)
b_dis_guesses <- runif(Nreps_global, min = 0, max = 50)
eps_A_guesses <- runif(Nreps_global, min = 0.01, max = 0.5)
f_ai_guesses <- runif(Nreps_global, min = 0.1, max = 0.99)
f_h_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
mu_ras_guesses <- runif(Nreps_global, min = 1e-3, max = 50)
mu_ris_guesses <- runif(Nreps_global, min = 1e-3, max = 50)
rho_guesses <- runif(Nreps_global, min = 0.01, max = 1)
tau_guesses <- runif(Nreps_global, min = 1e-4, max = 5)
b_idps_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
sigmaSE_guesses <- runif(Nreps_global, min = 0.01, max = 0.2)


global_guesses_8 <- as.data.frame(cbind(
  s_0 = s_0_guesses,
  e_0 = e_0_guesses,
  a_0 = a_0_guesses,
  i_0 = i_0_guesses,
  h_0 = h_0_guesses,
  ra_0 = ra_0_guesses,
  ri_0 = ri_0_guesses,
  sigmaSE = sigmaSE_guesses,
  a_cov = a_cov_guesses,
  b_cov = b_cov_guesses,
  b_dis = b_dis_guesses,
  eps_A = eps_A_guesses,
  f_ai = f_ai_guesses,
  f_h = f_h_guesses,
  mu_ras = mu_ras_guesses,
  mu_ris = mu_ris_guesses,
  tau = tau_guesses,
  rho = rho_guesses,
  b_idps = b_idps_guesses
))
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_global_8 <- foreach (guess=iter(global_guesses_8, "row"), .combine=c) %dopar% {
  (
    m_local_mle_8
    %>% mif2(Nmif=Nmif, params=c(fixed_params_8, unlist(guess)))
    %>% mif2(Nmif=Nmif, cooling.fraction.50 = 0.1)
  )
}
end <- Sys.time()
sprintf("Run time of global iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_global_all_8 <- (
  foreach(
    i=1:Nreps_global,
    .combine=rbind
  ) %dopar% {
    logmeanexp(
      replicate(
        Nreps_eval,
        logLik(pfilter(m_8, params=coef(m_global_8[[i]]), Np=1000))
      ),
      se=TRUE
    )
  }
)
```

### Collect Results

```{r}
df_results_global_8 <- (
  data.frame(
    t(sapply(m_global_8, coef)),
    log_lik=loglik_global_all_8[,1],
    log_lik_se=loglik_global_all_8[,2]
  )
  %>% select(
    names(df_results_local_8)
  )
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_8)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_global_8, 
      file = model_output_filename_8, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostic

```{r}
model_params_8 <- read.table(
  model_output_filename_8,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_8$log_lik, digits=5)
```

#### Pair plot

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_8
  %>% filter(!is.na(log_lik))
  %>% filter((log_lik>max(log_lik) - 100))
  %>% bind_rows(global_guesses_8)
  %>% mutate(
    type = if_else(is.na(log_lik), "guess", "result")
  )
  %>% arrange(type)
)
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +f_h
    +eps_A
    +mu_ras
    +mu_ris
    +tau
    +rho
    +b_idps
    +sigmaSE
  ),
  data=res_to_plot,
  col=ifelse(res_to_plot$type == "guess", grey(0.5), "red")
)
```

#### Simulations from best model

```{r}
sims_global_best_ll_8 <- (
  m_global_8[[which(rank(-loglik_global_all_8[,1]) == 1)]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_ll_agg_8 <- (
  sims_global_best_ll_8
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = mean(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)

sims_global_best_sd_8 <- (
  m_global_8[[which.min(loglik_global_all_8[,2])]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_sd_agg_8 <- (
  sims_global_best_sd_8
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = mean(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 6
p1 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_ll_agg_8,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_ll_agg_8,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
p2 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_sd_agg_8,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_sd_agg_8,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best SD",
    x = "Date",
    y = "Counts"
  )
)
p1/p2
```

```{r}
coef(m_global_8[[which(rank(-loglik_global_all_8[,1]) == 1)]])
```

```{r}
#| fig-width: 10
#| fig-height: 3
(
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_ll_agg_8,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_ll_agg_8,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + geom_line(
    data = sims_global_best_ll_8 %>% filter(.id == 1),
    mapping = aes(x = date, y = reports), 
    color = "red", 
    linetype = "solid",
    linewidth = 1
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
```


```{r}
#| fig-width: 10
#| fig-height: 10
(
  sims_global_best_ll_8
  %>% filter(.id == 1)
  %>% select(
    date, 
    S, 
    E, 
    A, 
    I, 
    H, 
    C,
    reports,
    RA,
    RI,
    W,
    N
  )
  %>% pivot_longer(
    cols = -date,
    names_to = "compartment",
    values_to = "counts"
  )
  %>% ggplot(
    aes(x = date, y = counts, color = compartment)
  )
  + facet_wrap(~compartment, scales = "free_y")
  + geom_line()
  + guides(color = "none")
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + labs(
    x = "Date",
    y = "Counts"
  )
)
```

## Profile Likelihood

### b_cov Profiles

#### Search Box

```{r}
bcov_prof_lik_params_6 <- (
  model_params_6
  %>% filter(log_lik > max(log_lik) - 100)
  %>% select(-c(log_lik, log_lik_se, b_cov))
  %>% gather(variable, value)
  %>% group_by(variable)
  %>% summarise(
    min=min(value),
    max=max(value)
  )
  %>% ungroup()
  %>% column_to_rownames(
    var="variable"
  )
  %>% t()
)
  
```

#### Profile Starts

```{r}
profile_pts <- 10
bcov_profile_starts_6 <- (
  profile_design(
    b_cov = seq(1, 200, length=profile_pts),
    lower = bcov_prof_lik_params_6["min", ],
    upper = bcov_prof_lik_params_6["max", ],
    nprof = profile_Nreps
  )
  %>% select(
    names(df_results_local_6 %>% select(-c(log_lik, log_lik_se)))
  )
)
```

#### Parameters random walk

```{r}
bcov_profile_rw.sd_6 <- rw_sd(
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  h_0 = ivp(rw.sd_ivp),
  r_0 = ivp(rw.sd_ivp),
  a_cov = rw.sd_rp,
  b_cov = 0,
  b_dis = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_ai = rw.sd_rp,
  f_h = rw.sd_rp,
  mu_rs = rw.sd_rp,
  rho = rw.sd_rp,
  tau = rw.sd_rp,
  b_idps = rw.sd_rp
)
```

```{r}
bcov_profile_params_6 <- foreach (start=iter(bcov_profile_starts_6, "row"), .combine=rbind) %dopar% {
  mf <- (
    mif2(
      m_6,
      params=unlist(start),
      Np = Np,
      Nmif = ceiling(Nmif/2),
      cooling.fraction.50 = 0.5,
      rw.sd = bcov_profile_rw.sd_6
    )
    %>% mif2(
      cooling.fraction.50 = 0.1
    )
  )
  ll <- (
    replicate(
      Nreps_eval,
      (
        mf 
        %>% pfilter(Np=Np)
        %>% logLik()
      )
    )
    %>% logmeanexp(se=TRUE)
  )
  data.frame(
    as.list(coef(mf)),
    log_lik = ll[1],
    log_lik_se = ll[2]
  )
}
```

#### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_6)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      bcov_profile_params_6 %>% select(names(df_results_local_6)), 
      file = model_output_filename_6, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

#### Diagnostic

```{r}
model_params_6 <- read.table(
  model_output_filename_6,
  row.names = NULL,
  header = TRUE
)
```

```{r}
summary(model_params_6$log_lik, digits=5)
```

```{r}
#| fig-height: 6
#| fig-width: 6
(
  bcov_profile_params_6
  %>% group_by(b_cov)
  %>% summarise(
    log_lik = mean(log_lik),
    log_lik_se = mean(log_lik_se)
  )
  %>% filter(log_lik>max(log_lik) - 1000)
  %>% ungroup()
  %>% ggplot(
    aes(x=b_cov, y=log_lik)
  )
  + geom_point()
  + scale_x_continuous(limits=c(0, 500))
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_6
  %>% filter(log_lik>max(log_lik) - 100)
)
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +f_h
    +eps_A
    +mu_rs
    +tau
    +rho
    +b_idps
    +sigmaSE
  ),
  data=res_to_plot,
)
```

### mu_rs Profiles

#### Search Box

```{r}
murs_prof_lik_params_6 <- (
  model_params_6
  %>% filter(log_lik > max(log_lik) - 100)
  %>% select(-c(log_lik, log_lik_se, mu_rs))
  %>% gather(variable, value)
  %>% group_by(variable)
  %>% summarise(
    min=min(value),
    max=max(value)
  )
  %>% ungroup()
  %>% column_to_rownames(
    var="variable"
  )
  %>% t()
)
  
```

#### Profile Starts

```{r}
profile_pts <- 15
murs_profile_starts_6 <- (
  profile_design(
    mu_rs = seq(1, 25, length=profile_pts),
    lower = murs_prof_lik_params_6["min", ],
    upper = murs_prof_lik_params_6["max", ],
    nprof = profile_Nreps
  )
  %>% select(
    names(df_results_local_6 %>% select(-c(log_lik, log_lik_se)))
  )
)
```

#### Parameters random walk

```{r}
murs_profile_rw.sd_6 <- rw_sd(
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  h_0 = ivp(rw.sd_ivp),
  r_0 = ivp(rw.sd_ivp),
  a_cov = rw.sd_rp,
  b_cov = rw.sd_rp,
  b_dis = rw.sd_rp,
  eps_A = rw.sd_rp,
  f_ai = rw.sd_rp,
  f_h = rw.sd_rp,
  mu_rs = 0,
  rho = rw.sd_rp,
  tau = rw.sd_rp,
  b_idps = rw.sd_rp
)
```

```{r}
murs_profile_params_6 <- foreach (start=iter(murs_profile_starts_6, "row"), .combine=rbind) %dopar% {
  mf <- (
    mif2(
      m_6,
      params=unlist(start),
      Np = Np,
      Nmif = ceiling(Nmif/2),
      cooling.fraction.50 = 0.5,
      rw.sd = murs_profile_rw.sd_6
    )
    %>% mif2(
      cooling.fraction.50 = 0.1
    )
  )
  ll <- (
    replicate(
      Nreps_eval,
      (
        mf 
        %>% pfilter(Np=Np)
        %>% logLik()
      )
    )
    %>% logmeanexp(se=TRUE)
  )
  data.frame(
    as.list(coef(mf)),
    log_lik = ll[1],
    log_lik_se = ll[2]
  )
}
```

#### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_6)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      murs_profile_params_6 %>% select(names(df_results_local_6)), 
      file = model_output_filename_6, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

#### Diagnostic

```{r}
model_params_6 <- read.table(
  model_output_filename_6,
  row.names = NULL,
  header = TRUE
)
```

```{r}
summary(model_params_6$log_lik, digits=5)
```

```{r}
#| fig-height: 6
#| fig-width: 6
(
  model_params_6
  %>% group_by(mu_rs)
  %>% summarise(
    log_lik = mean(log_lik),
    log_lik_se = mean(log_lik_se)
  )
  %>% filter(log_lik>max(log_lik) - 1000)
  %>% ungroup()
  %>% ggplot(
    aes(x=mu_rs, y=log_lik)
  )
  + geom_point()
  + scale_x_continuous(limits=c(0, 100))
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_6
  %>% filter(log_lik>max(log_lik) - 100)
)
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +f_h
    +eps_A
    +mu_rs
    +tau
    +rho
    +b_idps
  ),
  data=res_to_plot,
)
```

## Bayes Search

### Prior Functions

```{r}
rprior_6 <- Csnippet("
  s_0 = rbeta(1, 1);
  e_0 = rbeta(1, 1);
  a_0 = rbeta(1, 1);
  i_0 = rbeta(1, 1);
  h_0 = rbeta(1, 1);
  r_0 = rbeta(1, 1);
  a_cov = rgamma(a_cov_0, a_cov_1);
  b_cov = rgamma(b_cov_0, b_cov_1);
  b_dis = rgamma(b_dis_0, b_dis_1);
  f_ai = rbeta(f_ai_0, f_ai_1);
  f_h = rbeta(f_h_0, f_h_1);
  eps_A = rbeta(eps_A_0, eps_A_1);
  mu_rs = rgamma(mu_rs_0, mu_rs_1);
  tau = rgamma(tau_0, tau_1);
  rho = rbeta(rho_0, rho_1);
  b_idps = rbeta(b_idps_0, b_idps_1);
")

dprior_6 <- Csnippet("
  lik = (
    dbeta(s_0, 1, 1, give_log)
    + dbeta(e_0, 1, 1, give_log)
    + dbeta(a_0, 1, 1, give_log)
    + dbeta(i_0, 1, 1, give_log)
    + dbeta(h_0, 1, 1, give_log)
    + dbeta(r_0, 1, 1, give_log)
    + dgamma(a_cov, a_cov_0, a_cov_1, give_log)
    + dgamma(b_cov, b_cov_0, b_cov_1, give_log)
    + dgamma(b_dis, b_dis_0, b_dis_1, give_log)
    + dbeta(f_ai, f_ai_0, f_ai_1, give_log)
    + dbeta(f_h, f_h_0, f_h_1, give_log)
    + dbeta(eps_A, eps_A_0, eps_A_1, give_log)
    + dgamma(mu_rs, mu_rs_0, mu_rs_1, give_log)
    + dgamma(tau, tau_0, tau_1, give_log)
    + dbeta(rho, rho_0, rho_1, give_log)
    + dbeta(b_idps, b_idps_0, b_idps_1, give_log)
  );
  if (!give_log) lik = exp(lik);
")
```

### Prior params

```{r}
test_x <- seq(0, 50, by=0.1)
test_y <- dgamma(test_x, shape=4, scale=5)
# test_y <- dexp(test_x, 1/100)
plot(test_x, test_y)
```

```{r}
test_x <- seq(0, 1, by=0.01)
test_y <- dbeta(test_x, 1, 6)
plot(test_x, test_y)
```

```{r}
prior_params_6 <- c(
  a_cov_0 = 3,
  a_cov_1 = 200,
  b_cov_0 = 3,
  b_cov_1 = 200,
  b_dis_0 = 1,
  b_dis_1 = 1,
  f_ai_0 = 2,
  f_ai_1 = 2,
  f_h_0 = 1,
  f_h_1 = 6,
  eps_A_0 = 2,
  eps_A_1 = 6,
  mu_rs_0 = 4,
  mu_rs_1 = 5,
  tau_0 = 2,
  tau_1 = 1,
  rho_0 = 6,
  rho_1 = 2,
  b_idps_0 = 1,
  b_idps_1 = 6
)
```

### Approximate modeling

```{r}
start <- Sys.time()
bayes_start_coefs_6 <- model_params_6[which.max(model_params_6$log_lik),]
m_bayes_6 <- (
  m_6
  %>% pomp(
    rprior = rprior_6,
    dprior = dprior_6,
    paramnames = c(paramnames_6, names(prior_params_6)),
    params = c(
      bayes_start_coefs_6,
      prior_params_6
    )
  )
)
m_bayesapprox_6 <- bsmc2(
  data = m_bayes_6,
  Np=20000
)
end <- Sys.time()
sprintf("Run time of bsmc: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
df_bayesapprox_6 <- (
  m_bayesapprox_6
  %>% as.data.frame()
  %>% select(c(all_of(paramnames_6), .id))
)
```

```{r}
#| fig-width: 10
#| fig-height: 10
(
  df_bayesapprox_6
  %>% group_by(.id)
  %>% slice_sample(n=1000)
  %>% ungroup()
  %>% mutate(
    .id = factor(.id, levels=c("prior", "posterior")), 
  )
  %>% arrange(.id)
  %>% ggpairs(
    aes(color=.id, alpha=.id, fill=.id),
    columns = names(global_guesses_6),
    upper = list(continuous = "points"),
    progress = FALSE,
  )
  + scale_color_manual(
    values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_fill_manual(values = c("posterior" = "cornflowerblue", "prior" = "lightgray"))
  + scale_alpha_manual(values = c("posterior" = 0.5, "prior" = 0.2))
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    plot.background = element_blank(),
    strip.background = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8)
  )
)
```

#### Simulations from parameter posterior

```{r}
approx_post_samples_6 <- (
  df_bayesapprox_6
  %>% filter(.id == "posterior")
  %>% select(-.id)
  %>% sample_n(100)
)
```

```{r}
approx_post_sims_6 <- (
  foreach (
    sample=iter(approx_post_samples_6, "row"),
    .combine=rbind
  ) %dopar% {
    (
      m_6
      %>% simulate(
        nsim = 1,
        params = unlist(sample),
        format = "data.frame",
        include.data = FALSE
      )
    )
  }
)
```

```{r}
approx_post_sims_agg_6 <- (
  approx_post_sims_6
  %>% group_by(date)
  %>% summarise(
    reports_median = median(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 3
(
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = approx_post_sims_agg_6,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = approx_post_sims_agg_6,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + scale_y_continuous(limits = c(0, 120))
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
```

### PMCMC

#### Proposal

```{r}
prop_logit <- 0.05
bayes_sd_6 <- c(
  s_0 = prop_logit,
  e_0 = prop_logit,
  a_0 = prop_logit,
  i_0 = prop_logit,
  r_0 = prop_logit,
  a_cov = 20,
  b_cov = 20,
  b_dis = 10,
  eps_A = prop_logit,
  f_ai = prop_logit,
  f_h = prop_logit,
  mu_rs = prop_logit,
  tau = prop_logit,
  rho = prop_logit,
  b_idps = prop_logit
)
```

#### Run search

```{r}
start <- Sys.time()
m_bayesfull_6 <- (
  foreach (
    i = 1:5, 
    .combine = c
  ) %dopar% {
    pmcmc(
      m_bayes_6,
      # m_bayesapprox_6,
      Nmcmc=5000, #Nbayes_iter,  # 40000
      Np=100,
      # proposal=mvn_diag_rw(bayes_sd_2)
      proposal=mvn_rw_adaptive(
        bayes_sd_6,
        scale.start = 100,
        scale.cooling = 0.95,
        shape.start = 2000
        # shape.start = 100
      )
    )
  }
)
end <- Sys.time()
as.integer(round(difftime(end, start, units='mins')))
```

```{r}
#| fig-width: 12
#| fig-asp: 1
plot(
  m_bayesfull_6,
  pars = c(
    "loglik",
    "log.prior",
    "a_cov",
    "b_cov",
    "b_dis",
    "b_idps",
    "f_ai",
    "f_h",
    "eps_A",
    "mu_rs",
    "tau",
    "rho"
  )
)
```

```{r}
datalist <- list()
for (i in 1:length(m_bayes_2)) {
  datalist[[i]] <- (
    traces(m_bayes_2[[i]]) 
    %>% as.data.frame() 
    %>% select(paramnames_2)
    %>% tail(1000)
  )
}
df_bayes_2 <- bind_rows(datalist)
```

```{r}
#| fig-width: 8
#| fig-height: 8
(
  df_bayes_2
  %>% ggpairs(
    columns = names(global_guesses_2),
    lower = "blank",
    upper = list(continuous = wrap("points", alpha = 0.3)),
    progress = FALSE,
  )
  + theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
)
```

# With Separate Recovered, no hospitalized

```{r}
model_output_filename_9 <- file.path(output_dir, "uvira_multioutbreak_sep_rec.csv")
```

## Model Definition

### Fixed Parameters

```{r}
N_0 <- uvira_pop_2016
mu_latend <- 1 / ((5/7) / 52) # inverse of latent period (5 days transformed in weeks)
mu_ar <- 1 / ((10/7) / 52) # inverse of asymptomatic period (10 days transformed in weeks)
mu_ir <- 1 / ((10/7) / 52)  # inverse of infectious period (10 days transformed in weeks)

fixed_params_9 <- c(
  N_0 = N_0,
  mu_latend = mu_latend,
  mu_ar = mu_ar,
  mu_ir = mu_ir
)
```

### Initialization Function

```{r}
rinit_9 <- Csnippet("
  double m = N_0/(s_0+e_0+a_0+i_0+ra_0+ri_0);
  S = nearbyint(s_0*m);
  E = nearbyint(e_0*m);
  A = nearbyint(a_0*m);
  I = nearbyint(i_0*m);
  RA = nearbyint(ra_0*m);
  RI = nearbyint(ri_0*m);
  N = S + E + A + I + RA + RI;
  C = 0;
  W = 0;
")
```

### Step Function

```{r}
rproc_9 <- Csnippet("
  double foi, births, hosp, dw;
  double rate[13];
  double trans[13];
  int idps_scaled;
  double rate_idps[5];
  int trans_idps[5];

  // idps
  if (idps < 0) {
    if (N > I) {
      idps_scaled = floor(fmin((-idps * b_idps), (N-I)/10));
      double s = (N-I) / (S + E + A + RA + RI);
      rate_idps[0] = s*S/(N-I);
      rate_idps[1] = s*E/(N-I);
      rate_idps[2] = s*A/(N-I);
      rate_idps[3] = s*RA/(N-I); 
      rate_idps[4] = s*RI/(N-I);
      rmultinom(idps_scaled, &rate_idps[0], 5, &trans_idps[0]);
      S -= fmin(trans_idps[0], S);
      E -= fmin(trans_idps[1], E);
      A -= fmin(trans_idps[2], A);
      RA -= fmin(trans_idps[3], RA);
      RI -= fmin(trans_idps[4], RI);
    }
  }
  if (idps > 0) {
    idps_scaled = floor(fmin((idps * b_idps)/5, (N-I)/10));
    trans_idps[0] = idps_scaled;
    trans_idps[1] = idps_scaled;
    trans_idps[2] = idps_scaled;
    trans_idps[3] = idps_scaled;
    trans_idps[4] = idps_scaled;
    S += trans_idps[0];
    E += trans_idps[1];
    A += trans_idps[2];
    RA += trans_idps[3];
    RI += trans_idps[4];
  }
  
  N = S + E + A + I + RA + RI;

  // Poisson births
  births = rpois(birthrate * N * dt);

  // expected force of infection
  foi = (a_cov + b_cov * cov + b_dis * dis)*(I + eps_A * A)/N;
  
  // white noise (extrademographic stochasticity)
  dw = rgammawn(sigmaSE,dt);

  rate[0] = foi*dw/dt;  // stochastic force of infection
  rate[1] = deathrate;        // natural death rate
  rate[2] = mu_latend * f_ai;      // transition to asymp
  rate[3] = mu_latend * (1 - f_ai); // transition to symp
  rate[4] = deathrate;        // natural death rate
  rate[5] = mu_ar;       // asymp -> recovery
  rate[6] = deathrate;        // natural death rate
  rate[7] = mu_ir;       // symp -> recovered
  rate[8] = deathrate;        // natural death rate
  rate[9] = mu_ras;       // recovered -> susceptible
  rate[10] = deathrate;        // natural death rate
  rate[11] = mu_ris;       // recovered -> susceptible
  rate[12] = deathrate;        // natural death rate

  // transitions between classes
  reulermultinom(2, S, &rate[0], dt, &trans[0]);
  reulermultinom(3, E, &rate[2], dt, &trans[2]);
  reulermultinom(2, A, &rate[5], dt, &trans[5]);
  reulermultinom(2, I, &rate[7], dt, &trans[7]);
  reulermultinom(2, RA, &rate[9], dt, &trans[9]);
  reulermultinom(2, RI, &rate[11], dt, &trans[11]);

  S += births - trans[0] - trans[1] + trans[9] + trans[11];
  E += trans[0] - trans[2] - trans[3] - trans[4];
  A += trans[2] - trans[5] - trans[6];
  I += trans[3] - trans[7] - trans[8];
  RA += trans[5] - trans[9] - trans[10];
  RI += trans[7] - trans[11] - trans[12];
  
  // Measured
  C += trans[3];
  
  // Noise
  W += (dw - dt)/sigmaSE;  
  
  N = S + E + A + I + RA + RI;
")
```

### Observation Function

```{r}
dmeas_9 <- Csnippet("
  double f;
  double tol = 1.0e-25;
  if (tau > 0.0) {
    f = dnbinom_mu(nearbyint(reports), 1.0/tau, rho*C, give_log) + tol;
  }
  else {
    f = dpois(nearbyint(reports), rho*C, give_log) + tol;
  }
  lik = (give_log) ? f : exp(f);
")

rmeas_9 <- Csnippet("
  reports = rnorm(rho*C, sqrt( pow(tau*C,2) + rho*C ) );
  if (reports > 0.0) {
    reports = nearbyint(reports);
  } else {
    reports = 0.0;
 }")

```

## Initial parameter estimates

```{r}
a_cov_guess <- 60
b_cov_guess <- 250
eps_A_guess <- 0.08
f_ai_guess <- 0.55
mu_ras_guess <- 1 / ((100/7) / 52) # inverse of immunity period (days transformed in weeks)
mu_ris_guess <- 1 / ((365/7) / 52) # inverse of immunity period (days transformed in weeks)
rho_guess <- 0.03
s_0_guess <- 0.55
e_0_guess <- 0.02 
a_0_guess <- 0.01 
i_0_guess <- 0.005 
ra_0_guess <- 0.3 
ri_0_guess <- max(1 - s_0_guess - e_0_guess - a_0_guess - i_0_guess - ra_0_guess, 0)
tau_guess <- 0.002
b_idps_guess <- 0.05
b_dis_guess <- 10
sigmaSE_guess <- 0.05

init_params_9 <- c(
  fixed_params_9,
  sigmaSE = sigmaSE_guess,
  s_0 = s_0_guess,
  e_0 = e_0_guess,
  a_0 = a_0_guess,
  i_0 = i_0_guess,
  ra_0 = ra_0_guess,
  ri_0 = ri_0_guess,
  a_cov = a_cov_guess,
  b_cov = b_cov_guess,
  eps_A = eps_A_guess,
  f_ai = f_ai_guess,
  mu_ras = mu_ras_guess,
  mu_ris = mu_ris_guess,
  rho = rho_guess,
  tau = tau_guess,
  b_dis = b_dis_guess,
  b_idps = b_idps_guess
)
```

## POMP object

```{r}
statenames_9 <- c(
  "S", 
  "E", 
  "A", 
  "I", 
  "RA", 
  "RI",
  "C",
  "W",
  "N"
)
obsnames_9 <- "reports"
covar_9 <- covariate_table(
  df_covar %>% select(c(date, cov, idps, dis, birthrate, deathrate)),
  times="date"
)
covarnames_9 <- c(
  "cov", 
  "idps", 
  "dis",
  "birthrate", 
  "deathrate"
)
rp_names_log_9 <- c(
  "sigmaSE",
  "a_cov",
  "b_cov",
  "b_dis",
  "mu_ras",
  "mu_ris",
  "tau"
)
rp_names_logit_9 <- c(
  "f_ai",
  "eps_A",
  "rho",
  "b_idps"
)
ivp_names_9 <- c(
  "s_0",
  "e_0",
  "a_0",
  "i_0",
  "ra_0",
  "ri_0"
)

paramnames_9 <- c(rp_names_log_9, rp_names_logit_9, ivp_names_9, names(fixed_params_9))
accumvars_9 <- c(
  "C",
  "W"
)
partrans_9 <- parameter_trans(
  log=rp_names_log_9,
  logit=rp_names_logit_9,
  barycentric=ivp_names_9
)

m_9 <- (
  df_model
  %>% select(date, reports)
  %>% pomp(
    times = "date",
    t0 = df_covar$date[1],
    rprocess = euler(
      step.fun = rproc_9,
      delta.t = 1/52/7
    ),
    rinit = rinit_9,
    rmeasure = rmeas_9,
    dmeasure = dmeas_9,
    obsnames = obsnames_9,
    covar = covar_9,
    covarnames = covarnames_9,
    accumvars = accumvars_9,
    statenames = statenames_9,
    paramnames = paramnames_9,
    partrans = partrans_9,
    params = init_params_9
  )
)
```

## Simulations

```{r}
sims_9 <- (
  m_9
  %>% simulate(
    nsim = 20,
    format = "data.frame",
    include.data = TRUE
  )
)
```

```{r}
pf_sim_9 <- pfilter(m_9, Np = 1000)
lk_sim_9 <- logLik(pf_sim_9)
lk_sim_9
```

```{r}
(
  sims_9
  %>% filter(.id == 1)
  %>% select(
    date, 
    S, 
    E, 
    A, 
    I, 
    C,
    RA, 
    RI,
    W,
    N
  )
  %>% pivot_longer(
    cols = -date,
    names_to = "compartment",
    values_to = "counts"
  )
  %>% ggplot(
    aes(x = date, y = counts, color = compartment)
  )
  + facet_wrap(~compartment, scales = "free_y", ncol = 3)
  + geom_line()
  + guides(color = "none")
)
```

```{r}
#| fig-width: 4.5
#| fig-height: 3
(
  sims_9
  %>% mutate(
    date = as.Date("2016-01-01") + 7 * date
  )
  %>% ggplot(
    aes(x = date, y = reports, group=.id, color=.id=="data")
  )
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line()
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases",
    x = "Date",
    y = "Counts"
  )
)
ggsave(filename = "test_pomp_simulation.png", path = img_dir)
```

## Local Search

```{r}
# Parameters 
rw.sd_rp <- 0.02
rw.sd_ivp <- 0.2
cooling.fraction.50 <- 0.5 # Level of parameter variance after 50% of iterations
rw.sd_9 <- rw_sd(
  s_0 = ivp(rw.sd_ivp),
  e_0 = ivp(rw.sd_ivp),
  a_0 = ivp(rw.sd_ivp),
  i_0 = ivp(rw.sd_ivp),
  ra_0 = ivp(rw.sd_ivp),
  ri_0 = ivp(rw.sd_ivp),
  sigmaSE = rw.sd_rp,
  a_cov = rw.sd_rp,
  b_cov = rw.sd_rp,
  b_dis = rw.sd_rp,
  f_ai = rw.sd_rp,
  eps_A = rw.sd_rp,
  mu_ras = rw.sd_rp,
  mu_ris = rw.sd_rp,
  rho = rw.sd_rp,
  b_idps = rw.sd_rp,
  tau = rw.sd_rp
)
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_local_9 <- foreach (
  i=1:Nreps_local, 
  .combine=c 
) %dopar% {
  init_params_9[rp_names_log_9] <- rlnorm(
    n=length(rp_names_log_9), 
    meanlog=log(init_params_9[rp_names_log_9]),
    sdlog=1
  )
  init_params_9[c(rp_names_logit_9, ivp_names_9)] <- runif(
    n=length(c(rp_names_logit_9, ivp_names_9)),
    min=0.01,
    max=0.99
  )
  (
    mif2(
      m_9,
      Np=Np,
      Nmif=Nmif,
      params=init_params_9,
      cooling.fraction.50 = cooling.fraction.50,
      rw.sd=rw.sd_9
    )
  )
}
end <- Sys.time()
sprintf("Run time of local iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_local_all_9 <- foreach(
  mf = m_local_9,
  .combine=rbind
) %dopar% {
  pf <- replicate(
    n = Nreps_eval,
    logLik(pfilter(mf, Np = Np))
  )
  logmeanexp(pf, se = TRUE)
}
```

Focus on the highest estimated likelihood to get MLE

```{r}
m_local_mle_9 <- m_local_9[[which.max(loglik_local_all_9[,1])]]
params_local_9 <- coef(m_local_mle_9)
loglik_local_best_9 <- logmeanexp(
  replicate(
    n = Nreps_eval,
    logLik(pfilter(m_local_mle_9, Np = 1000))
  ),
  se = TRUE
)
```

```{r}
loglik_local_best_9
```

### Collect Results

```{r}
df_results_local_9 <- data.frame(
  t(sapply(m_local_9, coef)),
  log_lik=loglik_local_all_9[,1],
  log_lik_se=loglik_local_all_9[,2]
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_9)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_local_9, 
      file = model_output_filename_9, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostics

```{r}
model_params_9 <- read.table(
  model_output_filename_9,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_9$log_lik, digits = 5)
```

#### Pair plot

```{r}
(
  m_local_9
  %>% traces()
  %>% melt()
  %>% filter(!name %in% c(names(fixed_params_9), ivp_names_9))
  %>% ggplot(
    aes(
      x=iteration,
      y=value,
      group=.L1,
      color=factor(.L1)
    )
  )
  + geom_line()
  + guides(color="none")
  + facet_wrap(~name, scales="free_y")
)
```

```{r}
#| fig-width: 12
#| fig-asp: 1
data_to_plot <- (
  model_params_9
  %>% filter(!is.na(log_lik))
  %>% filter(log_lik > max(log_lik) - 100)
)

pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +eps_A
    +mu_ras
    +mu_ris
    +tau
    +rho
    +b_idps
    +sigmaSE
  ),
  data=data_to_plot
)
```

## Global Search

### Search box

```{r}
s_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
e_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
i_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
ra_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
ri_0_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
a_cov_guesses <- runif(Nreps_global, min = 0, max = 100)
b_cov_guesses <- runif(Nreps_global, min = 2, max = 200)
b_dis_guesses <- runif(Nreps_global, min = 0, max = 50)
eps_A_guesses <- runif(Nreps_global, min = 0.01, max = 0.5)
f_ai_guesses <- runif(Nreps_global, min = 0.1, max = 0.99)
mu_ras_guesses <- runif(Nreps_global, min = 1e-3, max = 50)
mu_ris_guesses <- runif(Nreps_global, min = 1e-3, max = 50)
rho_guesses <- runif(Nreps_global, min = 0.01, max = 1)
tau_guesses <- runif(Nreps_global, min = 1e-4, max = 5)
b_idps_guesses <- runif(Nreps_global, min = 0.01, max = 0.99)
sigmaSE_guesses <- runif(Nreps_global, min = 0.01, max = 0.2)


global_guesses_9 <- as.data.frame(cbind(
  s_0 = s_0_guesses,
  e_0 = e_0_guesses,
  a_0 = a_0_guesses,
  i_0 = i_0_guesses,
  ra_0 = ra_0_guesses,
  ri_0 = ri_0_guesses,
  sigmaSE = sigmaSE_guesses,
  a_cov = a_cov_guesses,
  b_cov = b_cov_guesses,
  b_dis = b_dis_guesses,
  eps_A = eps_A_guesses,
  f_ai = f_ai_guesses,
  mu_ras = mu_ras_guesses,
  mu_ris = mu_ris_guesses,
  tau = tau_guesses,
  rho = rho_guesses,
  b_idps = b_idps_guesses
))
```

### Run Iterated Particle Filter

```{r}
start <- Sys.time()
m_global_9 <- foreach (guess=iter(global_guesses_9, "row"), .combine=c) %dopar% {
  (
    m_local_mle_9
    %>% mif2(Nmif=Nmif, params=c(fixed_params_9, unlist(guess)))
    %>% mif2(Nmif=Nmif, cooling.fraction.50 = 0.1)
  )
}
end <- Sys.time()
sprintf("Run time of global iterated particle filter: %d minutes", as.integer(round(difftime(end, start, units='mins'))))
```

```{r}
loglik_global_all_9 <- (
  foreach(
    i=1:Nreps_global,
    .combine=rbind
  ) %dopar% {
    logmeanexp(
      replicate(
        Nreps_eval,
        logLik(pfilter(m_9, params=coef(m_global_9[[i]]), Np=1000))
      ),
      se=TRUE
    )
  }
)
```

### Collect Results

```{r}
df_results_global_9 <- (
  data.frame(
    t(sapply(m_global_9, coef)),
    log_lik=loglik_global_all_9[,1],
    log_lik_se=loglik_global_all_9[,2]
  )
  %>% select(
    names(df_results_local_9)
  )
)
```

### Temp Save

```{r}
if (run_level > 0) {
  append <- FALSE
  col.names <- TRUE
  row.names <- FALSE
  if (file.exists(model_output_filename_8)) {
    append <- TRUE
    col.names <- FALSE
  }
  (
    write.table(
      df_results_global_9, 
      file = model_output_filename_9, 
      append = append,
      col.names = col.names,
      row.names = row.names
    )
  )
}
```

### Diagnostic

```{r}
model_params_9 <- read.table(
  model_output_filename_9,
  row.names = NULL,
  header = TRUE
)
```

#### Summary

```{r}
summary(model_params_9$log_lik, digits=5)
```

#### Pair plot

```{r}
#| fig-width: 12
#| fig-asp: 1
res_to_plot <- (
  model_params_9
  %>% filter(!is.na(log_lik))
  %>% filter((log_lik>max(log_lik) - 100))
  %>% bind_rows(global_guesses_9)
  %>% mutate(
    type = if_else(is.na(log_lik), "guess", "result")
  )
  %>% arrange(type)
)
pairs(
  ~(
    log_lik
    +a_cov
    +b_cov
    +b_dis
    +f_ai
    +eps_A
    +mu_ras
    +mu_ris
    +tau
    +rho
    +b_idps
    +sigmaSE
  ),
  data=res_to_plot,
  col=ifelse(res_to_plot$type == "guess", grey(0.5), "red")
)
```

#### Simulations from best model

```{r}
sims_global_best_ll_9 <- (
  m_global_9[[which(rank(-loglik_global_all_9[,1]) == 2)]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_ll_agg_9 <- (
  sims_global_best_ll_9
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = mean(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)

sims_global_best_sd_9 <- (
  m_global_8[[which.min(loglik_global_all_9[,2])]]
  %>% simulate(
    nsim = 100,
    format = "data.frame",
    include.data = TRUE
  )
)
sims_global_best_sd_agg_9 <- (
  sims_global_best_sd_9
  %>% filter(.id != "data")
  %>% select(.id, date, reports)
  %>% group_by(date)
  %>% summarise(
    reports_median = mean(reports),
    reports_10q = quantile(reports, 0.1),
    reports_90q = quantile(reports, 0.9)
  )
)
```

```{r}
#| fig-width: 10
#| fig-height: 6
p1 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_ll_agg_9,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_ll_agg_9,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
p2 <- (
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_sd_agg_9,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_sd_agg_9,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best SD",
    x = "Date",
    y = "Counts"
  )
)
p1/p2
```

```{r}
coef(m_global_9[[which(rank(-loglik_global_all_9[,1]) == 1)]])
```

```{r}
#| fig-width: 10
#| fig-height: 3
(
  ggplot()
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + geom_line(
    data = df_model,
    mapping = aes(x = date, y = reports), 
    color = "black", 
    linetype = "dashed"
  )
  + geom_line(
      data = sims_global_best_ll_agg_8,
      mapping = aes(x = date, y = reports_median), 
      color = "cornflowerblue", 
      linetype = "solid",
      linewidth = 1
  )
  + geom_ribbon(
    data = sims_global_best_ll_agg_8,
    aes(x = date, ymin = reports_10q, ymax = reports_90q),
    alpha=0.3,
    fill = "cornflowerblue"
  )
  + geom_line(
    data = sims_global_best_ll_8 %>% filter(.id == 7),
    mapping = aes(x = date, y = reports), 
    color = "red", 
    linetype = "solid",
    linewidth = 1
  )
  + guides(color = "none")
  + labs(
    title = "Simulated and true reported cases - best Log Likelihood",
    x = "Date",
    y = "Counts"
  )
)
```


```{r}
#| fig-width: 10
#| fig-height: 10
(
  sims_global_best_ll_9
  %>% filter(.id == 1)
  %>% select(
    date, 
    S, 
    E, 
    A, 
    I, 
    C,
    reports,
    RA,
    RI,
    W,
    N
  )
  %>% pivot_longer(
    cols = -date,
    names_to = "compartment",
    values_to = "counts"
  )
  %>% ggplot(
    aes(x = date, y = counts, color = compartment)
  )
  + facet_wrap(~compartment, scales = "free_y")
  + geom_line()
  + guides(color = "none")
  + theme(
    panel.background = element_blank(),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 1),
    panel.grid = element_blank(),
    plot.background = element_blank(),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
  )
  + labs(
    x = "Date",
    y = "Counts"
  )
)
```

# Benchmarks

## Negative binomial IID Model

```{r}
nb_lik <- function(tau) {
  -sum(
    dnbinom(
      as.vector(obs(m_6)),
      size = exp(tau[1]),
      prob = exp(tau[2]),
      log = TRUE
    )
  )
}
```

```{r}
nb_mle <- optim(c(0, -5), nb_lik)
```

```{r}
-nb_mle$value
```

## ARMA model

```{r}
log_y <- log(as.vector(obs(m_6)) + 1)
arma_fit <- arima(
  log_y,
  order=c(2, 0, 2),
  seasonal=list(
    order=c(1, 0, 1),
    period=52
  )
)
```

```{r}
arma_fit$loglik - sum(log_y)
```
